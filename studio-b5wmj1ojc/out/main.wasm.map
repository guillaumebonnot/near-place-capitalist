{"version":3,"sources":["../out/near.ts","~lib/memory.ts","~lib/internal/allocator.ts","~lib/allocator/arena.ts","~lib/internal/arraybuffer.ts","~lib/internal/string.ts","~lib/internal/typedarray.ts","~lib/internal/memory.ts","../out/json/decoder.ts","~lib/string.ts","../out/main.ts","../out/main.near.ts","~lib/number.ts","~lib/internal/number.ts","~lib/builtins.ts","../out/model.near.ts","~lib/arraybuffer.ts","~lib/array.ts","../out/json/encoder.ts"],"names":[],"mappings":"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","sourceRoot":"assemblyscript:///","sourceContents":["const DEFAULT_SCRATCH_BUFFER_SIZE: usize = 1 << 16;\n\ntype DataTypeIndex = u32;\n\nconst DATA_TYPE_ORIGINATOR_ACCOUNT_ID: DataTypeIndex = 1;\nconst DATA_TYPE_CURRENT_ACCOUNT_ID: DataTypeIndex = 2;\nconst DATA_TYPE_STORAGE: DataTypeIndex = 3;\nconst DATA_TYPE_INPUT: DataTypeIndex = 4;\nconst DATA_TYPE_RESULT: DataTypeIndex = 5;\nconst DATA_TYPE_STORAGE_ITER: DataTypeIndex = 6;\n\n/**\n * Represents contract storage.\n */\nexport class Storage {\n  private _scratchBuf: Uint8Array = new Uint8Array(DEFAULT_SCRATCH_BUFFER_SIZE);\n\n  /**\n   * Internal method to fetch list of keys from the given iterator up the limit.\n   */\n  private _fetchIter(iterId: u32, limit: i32 = -1): string[] {\n    let result: string[] = new Array<string>();\n    while (limit-- != 0) {\n      let key = this._internalReadString(DATA_TYPE_STORAGE_ITER, 0, iterId);\n      if (key != null) {\n        result.push(key);\n      }\n      if (!storage_iter_next(iterId)) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns list of keys between the given start key and the end key. Both inclusive.\n   * NOTE: Must be very careful to avoid exploding amount of compute with this method.\n   * @param start The start key used as a lower bound in lexicographical order. Inclusive.\n   * @param end The end key used as a upper bound in lexicographical order. Inclusive.\n   * @param limit The maximum number of keys to return. Default is `-1`, means no limit.\n   */\n  keyRange(start: string, end: string, limit: i32 = -1): string[] {\n    return this._fetchIter(\n      storage_range(start.lengthUTF8 - 1, start.toUTF8(), end.lengthUTF8 - 1, end.toUTF8()),\n      limit,\n    );\n  }\n\n  /**\n   * Returns list of keys starting with given prefix.\n   * NOTE: Must be very careful to avoid exploding amount of compute with this method.\n   * @param prefix The key prefix.\n   * @param limit The maximum number of keys to return. Default is `-1`, means no limit.\n   */\n  keys(prefix: string, limit: i32 = -1): string[] {\n    return this._fetchIter(\n      storage_iter(prefix.lengthUTF8 - 1, prefix.toUTF8()),\n      limit,\n    );\n  }\n\n  /**\n   * @deprecated Use setString or set<string>\n   */\n  setItem(key: string, value: string): void {\n    this.setString(key, value);\n  }\n\n  /**\n   * @deprecated Use getString or get<string>\n   */\n  getItem(key: string): string {\n    return this.getString(key);\n  }\n\n  /**\n   * Store string value under given key. Both key and value are encoded as UTF-8 strings.\n   */\n  setString(key: string, value: string): void {\n    storage_write(key.lengthUTF8 - 1, key.toUTF8(), value.lengthUTF8 - 1, value.toUTF8());\n  }\n\n  /**\n   * Get string value stored under given key. Both key and value are encoded as UTF-8 strings.\n   */\n  getString(key: string): string {\n    return this._internalReadString(DATA_TYPE_STORAGE, key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  /**\n   * Store byte array under given key. Key is encoded as UTF-8 strings.\n   * Byte array stored as is.\n   *\n   * It's convenient to use this together with `domainObject.encode()`.\n   */\n  setBytes(key: string, value: Uint8Array): void {\n    storage_write(key.lengthUTF8 - 1, key.toUTF8(), value.byteLength, value.buffer.data);\n  }\n\n  /**\n   * Get byte array stored under given key. Key is encoded as UTF-8 strings.\n   * Byte array stored as is.\n   *\n   * It's convenient to use this together with `DomainObject.decode()`.\n   */\n  getBytes(key: string): Uint8Array {\n    return this._internalReadBytes(DATA_TYPE_STORAGE, key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  /**\n   * Returns true if the given key is present in the storage.\n   */\n  contains(key: string): bool {\n    return storage_has_key(key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  @inline\n  hasKey(key: string): bool {\n    return this.contains(key);\n  }\n\n  delete(key: string): void {\n    storage_remove(key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  /**\n   * @deprecated Use #delete\n   */\n  @inline\n  remove(key: string): void {\n    this.delete(key);\n  }\n\n  /**\n   * @deprecated Use #delete\n   */\n  @inline\n  removeItem(key: string): void {\n    this.delete(key);\n  }\n\n  /**\n   * Store 64-bit unsigned int under given key. Key is encoded as UTF-8 strings.\n   * Number is encoded as decimal string.\n   */\n  setU64(key: string, value: u64): void {\n    this.setItem(key, value.toString());\n  }\n\n  /**\n   * Get 64-bit unsigned int stored under given key. Key is encoded as UTF-8 strings.\n   * Number is encoded as decimal string.\n   *\n   * @returns int value or 0 if value is not found\n   */\n  getU64(key: string): u64 {\n    return U64.parseInt(this.getItem(key) || \"0\");\n  }\n\n  /**\n   * Stores given generic value under the key. Key is encoded as UTF-8 strings.\n   * Supported types: bools, integers, string and data objects defined in model.ts.\n   *\n   * @param key A key to use for storage.\n   * @param value A value to store.\n   */\n  set<T>(key: string, value: T): void {\n    if (isString<T>()) {\n      this.setString(key, value);\n    } else if (isInteger<T>()) {\n      this.setString(key, value.toString());\n    } else {\n      this.setBytes(key, value.encode());\n    }\n  }\n\n  /**\n   * Gets given generic value stored under the key. Key is encoded as UTF-8 strings.\n   * Supported types: bools, integers, string and data objects defined in model.ts.\n   * For common/dynamic arrays use {@link #getArray}\n   *\n   * @param key A key to read from storage.\n   * @param defaultValue The default value if the key is not available\n   * @returns A value of type T stored under the given key.\n   */\n  get<T>(key: string, defaultValue: T = null): T {\n    if (isString<T>()) { \n      return this.getString(key) || defaultValue;\n    } else if (isInteger<T>()) {\n      let s = this.getString(key);\n      if (s != null) {\n        if (isSigned<T>()) {\n          return <T>I64.parseInt(s);\n        } else {\n          return <T>U64.parseInt(s);\n        }\n      } else {\n        return defaultValue;\n      }\n    } else {\n      let bytes = this.getBytes(key);\n      if (bytes != null) {\n        let v = instantiate<T>();\n        return v.decode(bytes);\n      } else {\n        return defaultValue;\n      }\n    }\n  }\n\n  /**\n   * @hidden\n   * Reads given params into the internal scratch buffer and returns length.\n   */\n  private _internalBufferRead(dataType: DataTypeIndex, keyLen: usize, key: usize): usize {\n    for (let i = 0; i < 2; ++i) {\n      let len = data_read(\n        dataType,\n        keyLen,\n        key,\n        this._scratchBuf.byteLength,\n        this._scratchBuf.buffer.data,\n      );\n      if (len <= <usize>(this._scratchBuf.byteLength)) {\n        return len;\n      }\n      this._scratchBuf = new Uint8Array(len);\n    }\n    assert(false, \"Internal scratch buffer was resized more than once\");\n    return 0;\n  }\n\n  /**\n   * @hidden\n   * Reads a string for the given params.\n   */\n  _internalReadString(dataType: DataTypeIndex, keyLen: usize, key: usize): string {\n    let len = this._internalBufferRead(dataType, keyLen, key);\n    if (len == 0) {\n      return null;\n    }\n    return String.fromUTF8(this._scratchBuf.buffer.data, len);\n  }\n\n  /**\n   * @hidden\n   * Reads bytes for the given params.\n   */\n  _internalReadBytes(dataType: DataTypeIndex, keyLen: usize, key: usize): Uint8Array {\n    let len = this._internalBufferRead(dataType, keyLen, key);\n    if (len == 0) {\n      return null;\n    }\n    let res = new Uint8Array(len);\n    memory.copy(res.buffer.data, this._scratchBuf.buffer.data, len);\n    return res;\n  }\n}\n\n/**\n * An instance of a Storage class that is used for working with contract storage on the blockchain.\n */\nexport let storage: Storage = new Storage();\n\n/**\n * A namespace with classes and functions for persistent collections on the blockchain. \n */\nexport namespace collections {\n  const _KEY_LENGTH_SUFFIX = \":len\";\n  const _KEY_FRONT_INDEX_SUFFIX = \":front\";\n  const _KEY_BACK_INDEX_SUFFIX = \":back\";\n  const _KEY_ELEMENT_SUFFIX = \"::\";\n  const _KEY_RATING_SUFFIX = \":r\";\n  const _RATING_OFFSET: u64 = 2147483648;\n\n  /**\n   * A vector class that implements a persistent array.\n   */\n  export class Vector<T> {\n    private _elementPrefix: string;\n    private _lengthKey: string;\n    private _length: i32;\n\n    /**\n     * Creates or restores a persistent vector with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this vector.\n     */\n    constructor(prefix: string) {\n      this._elementPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n      this._lengthKey = prefix + _KEY_LENGTH_SUFFIX;\n      this._length = -1;\n    }\n\n    /**\n     * @returns An interal key for a given index.\n     */\n    @inline\n    private _key(index: i32): string {\n      return this._elementPrefix + index.toString();\n    }\n\n    /**\n     * Removes the content of the element from storage without changing length of the vector.\n     * @param index The index of the element to remove.\n     */\n    delete(index: i32): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      storage.delete(this._key(index));\n    }\n\n    /**\n     * @param index The index to check.\n     * @returns True if the given index is within the range of the vector indices.\n     */\n    containsIndex(index: i32): bool {\n      return index >= 0 && index < this.length;\n    }\n\n    /**\n     * @returns True if the vector is empty.\n     */\n    get isEmpty(): bool {\n      return this.length == 0;\n    }\n\n    /**\n     * @returns The length of the vector.\n     */\n    get length(): i32 {\n      if (this._length < 0) {\n        this._length = storage.get<i32>(this._lengthKey, 0);\n      }\n      return this._length;\n    }\n\n    /**\n     * Internally sets the length of the vector\n     */\n    private set length(value: i32) {\n      this._length = value;\n      storage.set<i32>(this._lengthKey, value);\n    }\n\n    /**\n     * Returns the element of the vector for a given index. Asserts the given index is within the\n     * range of the vector.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"[]\")\n    private __get(index: i32): T {\n      assert(this.containsIndex(index), \"Index out of range\");\n      return this.__unchecked_get(index);\n    }\n\n    /**\n     * Returns the element of the vector for a given index without checks.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"{}\")\n    private __unchecked_get(index: i32): T {\n      return storage.get<T>(this._key(index));\n    }\n\n    /**\n     * Sets the value of an element at the given index. Asserts the given index is within the\n     * range of the vector.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"[]=\")\n    private __set(index: i32, value: T): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      this.__unchecked_set(index, value);\n    }\n\n    /**\n     * Sets the value of an element at the given index without checks.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"{}=\")\n    private __unchecked_set(index: i32, value: T): void {\n      storage.set<T>(this._key(index), value);\n    }\n\n    /**\n     * Adds a new element to the end of the vector. Increases the length of the vector.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    push(element: T): i32 {\n      let index = this.length;\n      this.length = index + 1;\n      this.__unchecked_set(index, element);\n      return index;\n    }\n\n    /**\n     * Adds a new element to the end of the vector. Increases the length of the vector.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    @inline\n    pushBack(element: T): i32 {\n      return this.push(element);\n    }\n\n    /**\n     * Removes the last element from the vector and returns it. Asserts that the vector is not empty.\n     * Decreases the length of the vector.\n     * @returns The removed last element of the vector.\n     */\n    pop(): T {\n      assert(this.length > 0, \"Vector is empty\");\n      let index = this.length - 1;\n      this.length = index;\n      let result = this.__unchecked_get(index);\n      storage.delete(this._key(index));\n      return result;\n    }\n\n    /**\n     * Removes the last element from the vector and returns it. Asserts that the vector is not empty.\n     * Decreases the length of the vector.\n     * @returns The removed last element of the vector.\n     */\n    @inline\n    popBack(): T {\n      return this.pop();\n    }\n\n    /**\n     * @returns The last element of the vector. Asserts that the vector is not empty.\n     */\n    get back(): T {\n      return this.__get(this.length - 1);\n    }\n\n    /**\n     * @returns The last element of the vector. Asserts that the vector is not empty.\n     */\n    @inline\n    get last(): T {\n      return this.back;\n    }\n\n    /**\n     * @returns The first element of the vector. Asserts that the vector is not empty.\n     */\n    get front(): T {\n      return this.__get(0);\n    }\n\n    /**\n     * @returns The first element of the vector. Asserts that the vector is not empty.\n     */\n    @inline\n    get first(): T {\n      return this.front;\n    }\n  }\n\n\n  /**\n   * A deque class that implements a persistent bidirectional queue.\n   */\n  export class Deque<T> {\n    private _elementPrefix: string;\n    private _frontIndexKey: string;\n    private _backIndexKey: string;\n    private _frontIndex: i32;\n    private _backIndex: i32;\n\n    /**\n     * Creates or restores a persistent deque with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this deque.\n     */\n    constructor(prefix: string) {\n      this._elementPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n      this._frontIndexKey = prefix + _KEY_FRONT_INDEX_SUFFIX;\n      this._backIndexKey = prefix + _KEY_BACK_INDEX_SUFFIX;\n      this._frontIndex = i32.MIN_VALUE;\n      this._backIndex = i32.MAX_VALUE;\n    }\n\n    /**\n     * @returns An interal key for a given index.\n     */\n    @inline\n    private _key(index: i32): string {\n      return this._elementPrefix + index.toString();\n    }\n\n    /**\n     * @returns The index of the first/front element of the deque (inclusive).\n     */\n    private get frontIndex(): i32 {\n      if (this._frontIndex == i32.MIN_VALUE) {\n        this._frontIndex = storage.get<i32>(this._frontIndexKey, 0);\n      }\n      return this._frontIndex;\n    }\n\n    /**\n     * Internal. Sets the index of the first/front element.\n     */\n    private set frontIndex(value: i32) {\n      this._frontIndex = value;\n      storage.set<i32>(this._frontIndexKey, value);\n    }\n\n    /**\n     * @returns The index of the last/back element of the deque (inclusive).\n     */\n    private get backIndex(): i32 {\n      if (this._backIndex == i32.MAX_VALUE) {\n        this._backIndex = storage.get<i32>(this._backIndexKey, -1);\n      }\n      return this._backIndex;\n    }\n\n    /**\n     * Internal. Sets the index of the last/back element.\n     */\n    private set backIndex(value: i32) {\n      this._backIndex = value;\n      storage.set<i32>(this._backIndexKey, value);\n    }\n\n    /**\n     * @param index The index to check.\n     * @returns True if the given index is within the range of the deque indices.\n     */\n    containsIndex(index: i32): bool {\n      return index >= 0 && index < this.length;\n    }\n\n    /**\n     * Removes the content of the element from storage without changing length of the deque.\n     * @param index The index of the element to remove.\n     */\n    delete(index: i32): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      storage.delete(this._key(index + this.frontIndex));\n    }\n\n    /**\n     * @returns The length of the deque.\n     */\n    get length(): i32 {\n      return this.backIndex - this.frontIndex + 1;\n    }\n\n    /**\n     * @returns True if the deque is empty.\n     */\n    get isEmpty(): bool {\n      return this.length == 0;\n    }\n\n    /**\n     * Returns the element of the deque for a given index. Asserts the given index is within the\n     * range of the vector.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"[]\")\n    private __get(index: i32): T {\n      assert(this.containsIndex(index), \"Index out of range\");\n      return this.__unchecked_get(index);\n    }\n\n    /**\n     * Returns the element of the deque for a given index without checks.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"{}\")\n    private __unchecked_get(index: i32): T {\n      return storage.get<T>(this._key(index + this.frontIndex));\n    }\n\n    /**\n     * Sets the new value of an element at the given index. Asserts the given index is within the\n     * range of the deque.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"[]=\")\n    private __set(index: i32, value: T): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      this.__unchecked_set(index, value);\n    }\n\n    /**\n     * Sets the new value of an element at the given index without checks.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"{}=\")\n    private __unchecked_set(index: i32, value: T): void {\n      storage.set<T>(this._key(index + this.frontIndex), value);\n    }\n\n    /**\n     * Adds a new element in front of the deque. Increases the length of the deque.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    pushFront(element: T): i32 {\n      this.frontIndex -= 1;\n      this.__unchecked_set(0, element);\n      return 0;\n    }\n\n    /**\n     * Removes the first/front element from the deque and returns it.\n     * Asserts that the deque is not empty. Decreases the length of the deque.\n     * @returns The removed first element of the queue.\n     */\n    popFront(): T {\n      assert(this.length > 0, \"Deque is empty\");\n      let result = this.__unchecked_get(0);\n      storage.delete(this._key(this.frontIndex));\n      this.frontIndex += 1;\n      return result;\n    }\n\n    /**\n     * @returns The first/front element of the deque.\n     */\n    get front(): T {\n      return this.__get(0);\n    }\n\n    /**\n     * @returns The first/front element of the deque.\n     */\n    @inline\n    get first(): T {\n      return this.front;\n    }\n\n    /**\n     * Adds a new element to the end of the deque. Increases the length of the deque.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    pushBack(element: T): i32 {\n      let index = this.length;\n      this.backIndex += 1;\n      this.__unchecked_set(index, element);\n      return index;\n    }\n\n    /**\n     * Removes the last/back element from the deque and returns it.\n     * Asserts that the deque is not empty. Decreases the length of the deque.\n     * @returns The removed first element of the queue.\n     */\n    popBack(): T {\n      let index = this.length - 1;\n      assert(index >= 0, \"Deque is empty\");\n      let result = this.__unchecked_get(index);\n      storage.delete(this._key(this.backIndex));\n      this.backIndex -= 1;\n      return result;\n    }\n\n    /**\n     * @returns The last/back element of the deque.\n     */\n    get back(): T {\n      return this.__get(this.length - 1);\n    }\n\n    /**\n     * @returns The last/back element of the deque.\n     */\n    @inline\n    get last(): T {\n      return this.back;\n    }\n  }\n\n\n  /**\n   * A map class that implements a persistent unordered map.\n   * NOTE: The Map doesn't store keys, so if you need to retrive them, include keys in the values.\n   */\n  export class Map<K, V> {\n    private _elementPrefix: string;\n\n    /**\n     * Creates or restores a persistent map with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this map.\n     */\n    constructor(prefix: string) {\n      this._elementPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n    }\n\n    /**\n     * @returns An interal string key for a given key of type K.\n     */\n    private _key(key: K): string {\n      return this._elementPrefix + key.toString();\n    }\n\n    /**\n     * Returns values of the map between the given start key and the end key.\n     * @param start Starting from which key to include values. Default is `null`, means from the beginning.\n     * @param end Up to which key include values (inclusive). Default is `null`, means to the end.\n     * @param limit The maximum number of values to return. Default is `-1`, means no limit.\n     * @param startInclusive Whether the start key is inclusive. Default is `true`, means include start key.\n     *     It's useful to set it to false for pagination.\n     */\n    values(start: K = null, end: K = null, limit: i32 = -1, startInclusive: bool = true): V[] {\n      let startKey = (start != null) ? this._key(start) : this._elementPrefix;\n      if (!startInclusive) {\n        startKey += String.fromCharCode(0);\n      }\n      let endKey = (end != null) ? this._key(end) : (this._elementPrefix + String.fromCharCode(255));\n      let keys = storage.keyRange(startKey, endKey, limit);\n      return keys.map<V>((key: string) => storage.get<V>(key));\n    }\n\n    /**\n     * @param key Key to check.\n     * @returns True if the given key present in the map.\n     */\n    contains(key: K): bool {\n      return storage.contains(this._key(key));\n    }\n\n    /**\n     * Removes value and the key from the map.\n     * @param key Key to remove.\n     */\n    delete(key: K): void {\n      storage.delete(this._key(key));\n    }\n\n    /**\n     * @param key Key of the element.\n     * @param defaultValue The default value if the key is not present.\n     * @returns Value for the given key or the default value.\n     */\n    get(key: K, defaultValue: V = null): V {\n      return storage.get<V>(this._key(key), defaultValue);\n    }\n\n    /**\n     * Sets the new value for the given key.\n     * @param key Key of the element.\n     * @param value The new value of the element.\n     */\n    set(key: K, value: V): void {\n      storage.set<V>(this._key(key), value);\n    }\n  }\n\n  /**\n   * A TopN class that can return first N keys of a type K sorted by rating. Rating is stored as i32.\n   * Default sort order is descending (highest rated keys), but can be changed to ascending (lowest rated keys).\n   */\n  export class TopN<K> {\n    // Internally, this prefix is used for storing padded ratings\n    private _orderPrefix: string;\n    // Whether the order is descending\n    private _descending: bool;\n    // Number of unique keys.\n    private _length: i32;\n    // The key to store length.\n    private _lengthKey: string;\n\n    // A map to store rating by key\n    private _ratings: Map<K, i32>; \n\n    /**\n     * Creates or restores a persistent top N collection with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this collection.\n     * @param descending Sorting order of keys for rating. Default is descending (the highest rated keys).\n     */\n    constructor(prefix: string, descending: bool = true) {\n      this._ratings = new Map<K, i32>(prefix + _KEY_RATING_SUFFIX);\n      this._orderPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n      this._descending = descending;\n      this._lengthKey = prefix + _KEY_LENGTH_SUFFIX;\n      this._length = -1;\n    }\n\n    /**\n     * @returns A suffix for an internal key for a given external key of type K.\n     */\n    private _keySuffix(key: K): string {\n      return _KEY_ELEMENT_SUFFIX + key.toString();\n    }\n\n    /**\n     * @returns Converted integer rating into a padded string.\n     */\n    private _ratingKey(rating: i32): string {\n      let r: u32 = <u32>((<i64>rating) + _RATING_OFFSET);\n      if (this._descending) {\n        r = u32.MAX_VALUE - r;\n      }\n      return r.toString().padStart(10, \"0\");\n    }\n\n    /**\n     * Creates an internal key from a given rating and a given external key.\n     */\n    private _orderKey(rating: i32, key: K): string {\n      return this._orderPrefix + this._ratingKey(rating) + this._keySuffix(key);\n    }\n\n    /**\n     * @returns True if the TopN collection is empty.\n     */\n    get isEmpty(): bool {\n      return this.length == 0;\n    }\n\n    /**\n     * @returns The number of unique elements in the TopN collection.\n     */\n    get length(): i32 {\n      if (this._length < 0) {\n        this._length = storage.get<i32>(this._lengthKey, 0);\n      }\n      return this._length;\n    }\n\n    /**\n     * Internally sets the length of the collection.\n     */\n    private set length(value: i32) {\n      this._length = value;\n      storage.set<i32>(this._lengthKey, value);\n    }\n\n\n    /**\n     * @param key Key to check.\n     * @returns True if the given key is present.\n     */\n    contains(key: K): bool {\n      return this._ratings.contains(key);\n    }\n\n    /**\n     * Removes rating and the key from the collection.\n     * @param key Key to remove.\n     */\n    delete(key: K): void {\n      if (this.contains(key)) {\n        let rating = this._ratings.get(key);\n        this._ratings.delete(key);\n        storage.delete(this._orderKey(rating, key));\n        this.length -= 1;\n      }\n    }\n\n    /**\n     * @param keys The array of keys to lookup rating.\n     * @returns an array of key to rating pairs for the given keys.\n     */\n    keysToRatings(keys: K[]): near.MapEntry<K, i32>[] {\n      let result = new Array<near.MapEntry<K, i32>>(keys.length);\n      for (let index = 0; index < keys.length; ++index) {\n        let key = keys[index];\n        result[index] = new near.MapEntry<K, i32>(key, this._ratings.get(key));\n      }\n      return result;\n    }\n\n    /**\n     * @param limit The maximum limit of keys to return.\n     * @returns The array of top rated keys.\n     */\n    getTop(limit: i32): K[] {\n      let orderKeys = storage.keys(this._orderPrefix, limit);\n      return orderKeys.map<K>((orderKey: string) => storage.get<K>(orderKey));\n    }\n\n    /**\n     * Returns a top list starting from the given key (exclusive). It's useful for pagination.\n     * @param limit The maximum limit of keys to return.\n     * @param fromKey The key from which return top list (exclisive).\n     * @returns The array of top rated keys starting from the given key.\n     */\n    getTopFromKey(limit: i32, fromKey: K): K[] {\n      let rating = this.getRating(fromKey, 0);\n      let orderKeys = storage.keyRange(\n        this._orderKey(rating, fromKey) + String.fromCharCode(0),\n        this._orderPrefix + String.fromCharCode(255),\n        limit);\n      return orderKeys.map<K>((orderKey: string) => storage.get<K>(orderKey));\n    }\n\n    /**\n     * @param limit The maximum limit of keys to return.\n     * @returns The array of top rated keys with their corresponding rating.\n     */\n    getTopWithRating(limit: i32): near.MapEntry<K, i32>[] {\n      return this.keysToRatings(this.getTop(limit));\n    }\n\n    /**\n     * Returns a top list with rating starting from the given key (exclusive).\n     * It's useful for pagination.\n     * @param limit The maximum limit of keys to return.\n     * @param fromKey The key from which return top list (exclisive).\n     * @returns The array of top rated keys with their rating starting from the given key.\n     */\n    getTopWithRatingFromKey(limit: i32, fromKey: K): near.MapEntry<K, i32>[] {\n      return this.keysToRatings(this.getTopFromKey(limit, fromKey));\n    }\n\n    /**\n     * @param key Key of the element.\n     * @param defaultRating The default rating to return if the key is not present.\n     * @returns Value for the given key or the defaultRating.\n     */\n    getRating(key: K, defaultRating: i32 = 0): i32 {\n      return this._ratings.get(key, defaultRating);\n    }\n\n    /**\n     * Sets the new rating for the given key.\n     * @param key The key to update.\n     * @param rating The new rating of the key.\n     */\n    setRating(key: K, rating: i32): void {\n      if (this.contains(key)) {\n        let oldRating = this.getRating(key);\n        storage.delete(this._orderKey(oldRating, key));\n      } else {\n        this.length += 1;\n      }\n      this._ratings.set(key, rating);\n      storage.set<K>(this._orderKey(rating, key), key);\n    }\n\n    /**\n     * Increments rating of the given key by the given increment (1 by default).\n     * @param key The key to update.\n     * @param increment The increment value for the rating (1 by default).\n     */\n    incrementRating(key: K, increment: i32 = 1): void {\n      let oldRating = 0;\n      if (this.contains(key)) {\n        oldRating = this.getRating(key);\n        storage.delete(this._orderKey(oldRating, key));\n      } else {\n        this.length += 1;\n      }\n      let rating = oldRating + increment;\n      this._ratings.set(key, rating);\n      storage.set<K>(this._orderKey(rating, key), key);\n    }\n  }\n\n  /**\n   * Creates or restores a persistent vector with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this vector.\n   */\n  export function vector<T>(prefix: string): Vector<T> {\n    return new Vector<T>(prefix);\n  }\n\n  /**\n   * Creates or restores a persistent deque with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this deque.\n   */\n  export function deque<T>(prefix: string): Deque<T> {\n    return new Deque<T>(prefix);\n  }\n\n  /**\n   * Creates or restores a persistent map with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this map.\n   */\n  export function map<K, V>(prefix: string): Map<K, V> {\n    return new Map<K, V>(prefix);\n  }\n\n  /**\n   * Creates or restores a persistent TopN with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this collection.\n   * @param descending Sorting order of keys for rating. Default is descending (the highest rated keys).\n   */\n  export function topN<K>(prefix: string, descending: bool = true): TopN<K> {\n    return new TopN<K>(prefix, descending);\n  }\n}\n\n/**\n * Provides context for contract execution, including information about transaction sender, etc.\n */\nclass Context {\n  /**\n   * Account ID of transaction sender.\n   */\n  get sender(): string {\n    return storage._internalReadString(DATA_TYPE_ORIGINATOR_ACCOUNT_ID, 0, 0);\n  }\n\n  /**\n   * Account ID of contract.\n   */\n  get contractName(): string {\n    return storage._internalReadString(DATA_TYPE_CURRENT_ACCOUNT_ID, 0, 0);\n  }\n\n  /**\n   * Current block index.\n   */\n  get blockIndex(): u64 {\n    return block_index();\n  }\n\n  /**\n   * Current balance of the contract.\n   */\n  get currentBalance(): u64 {\n    return balance();\n  }\n\n  /**\n   * The amount of tokens received with this execution call.\n   */\n  get receivedAmount(): u64 {\n    return received_amount();\n  }\n\n  /**\n   * The amount of available gas left for this execution call.\n   */\n  get gasLeft(): u64 {\n    return gas_left();\n  }\n\n  /**\n   * The amount of available mana left for this execution call.\n   */\n  get manaLeft(): u32 {\n    return mana_left();\n  }\n}\n\nexport let context: Context = new Context();\n\nexport namespace near {\n\n  /**\n   * Helper class to store key->value pairs.\n   */\n  export class MapEntry<K, V> {\n    key: K;\n    value: V;\n\n    constructor(key: K, value: V) {\n      this.key = key;\n      this.value = value;\n    }\n  }\n\n  /**\n   * Hash given data. Returns hash as 32-byte array.\n   * @param data data can be passed as either Uint8Array or anything with .toString (hashed as UTF-8 string).\n   */\n  export function hash<T>(data: T): Uint8Array {\n    let result = new Uint8Array(32);\n    if (data instanceof Uint8Array) {\n      _near_hash(data.byteLength, data.buffer.data, result.buffer.data);\n    } else {\n      let str = data.toString();\n      _near_hash(str.lengthUTF8 - 1, str.toUTF8(), result.buffer.data);\n    }\n    return result;\n  }\n\n  /**\n   * Hash given data. Returns hash as 32-bit integer.\n   * @param data data can be passed as either Uint8Array or anything with .toString (hashed as UTF-8 string).\n   */\n  export function hash32<T>(data: T): u32 {\n    let dataToHash : Uint8Array;\n    if (data instanceof Uint8Array) {\n      return _near_hash32(data.byteLength, data.buffer.data);\n    } else {\n      let str = data.toString();\n      return _near_hash32(str.lengthUTF8 - 1, str.toUTF8());\n    }\n  }\n\n  /**\n   * Returns random byte buffer of given length.\n   */\n  export function randomBuffer(len: u32): Uint8Array {\n    let result = new Uint8Array(len);\n    _near_random_buf(len, result.buffer.data);\n    return result;\n  }\n\n  /**\n   * Returns random 32-bit integer.\n   */\n  export function random32(): u32 {\n    return random32();\n  }\n\n  export function log(msg: string): void {\n    _near_log(<usize>msg);\n  }\n\n  export function str<T>(value: T): string {\n    let arr: Array<T> = [value];\n    return arr.toString();\n  }\n\n  export function base58(source: Uint8Array): string {\n    // Code converted from:\n    // https://github.com/cryptocoinjs/base-x/blob/master/index.js\n    const iFACTOR = 2; // TODO: Calculate precise value to avoid overallocating\n    const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    let BASE = ALPHABET.length;\n    let LEADER = ALPHABET.charAt(0);\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    let pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    let size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    let b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = i32(source[pbegin])\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      assert(carry == 0, 'Non-zero carry');\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n}\n\n/**\n * Class to make asynchronous calls to other contracts and receive callbacks.\n * Here is an example on how to create a new async call with the callback.\n * ```\n * export function callMetaNear(): void {\n *   let itemArgs: AddItemArgs = {\n *     accountId: \"alice.near\",\n *     itemId: \"Sword +9000\",s\n *   };\n *   let promise = ContractPromise.create(\n *     \"metanear\",\n *     \"addItem\",\n *     itemArgs.encode(),\n *     0,\n *     0,\n *   );\n *   // Setting up args for the callback\n *   let requestArgs: OnItemAddedArgs = {\n *     \"itemAddedRequestId\": \"UNIQUE_REQUEST_ID\",\n *   };\n *   let callbackPromise = promise.then(\n *      \"_onItemAdded\",\n *      requestArgs.encode(),\n *      2,  // Attaching 2 additional requests, in case we need to do another call\n *   );\n *   callbackPromise.returnAsResult();\n * }\n * ```\n * See docs on used methods for more details.\n */\nexport class ContractPromise {\n  // Session-based unique promise ID. Don't preserve it longer than this execution.\n  id: i32;\n\n  /**\n   * Creates a new async call promise. Returns an instance of `ContractPromise`.\n   * The call would be scheduled if the this current execution of the contract succeeds\n   * without errors or failed asserts.\n   * @param contractName Account ID of the remote contract to call. E.g. `metanear`.\n   * @param methodName Method name on the remote contract to call. E.g. `addItem`.\n   * @param args Serialized arguments to pass into the method. To get them create a new model\n   *     specific for the method you calling, e.g. `AddItemArgs`. Then create an instance of it\n   *     and populate arguments. After this, serialize it into bytes. E.g.\n   *     ```\n   *     let itemArgs: AddItemArgs = {\n   *       accountId: \"alice.near\",\n   *       itemId: \"Sword +9000\",\n   *     };\n   *     // Serialize args\n   *     let args = itemArgs.encode();\n   *     ```\n   * @param mana The amount of additional requests the remote contract would be able to do.\n   * @param amount The amount of tokens from your contract to be sent to the remote contract with this call.\n   */\n  static create(\n      contractName: string,\n      methodName: string,\n      args: Uint8Array,\n      mana: u32,\n      amount: u64 = 0\n  ): ContractPromise {\n    return {\n      id: promise_create(\n        contractName.lengthUTF8 - 1, contractName.toUTF8(),\n        methodName.lengthUTF8 - 1, methodName.toUTF8(),\n        args.byteLength, args.buffer.data,\n        mana,\n        amount)\n    };\n  }\n\n  /**\n   * Creating a callback for the AsyncCall Promise created with `create` method.\n   * @param methodName Method name on your contract to be called to receive the callback.\n   *     NOTE: Your callback method name can start with `_`, which would prevent other\n   *     contracts from calling it directly. Only callbacks can call methods with `_` prefix.\n   * @param args Serialized arguments on your callback method, see `create` for details.\n   * @param mana The amount of additional requests your contract would be able to do.\n   */\n  then(\n      methodName: string,\n      args: Uint8Array,\n      mana: u32\n  ): ContractPromise {\n    return {\n      id: promise_then(\n        this.id,\n        methodName.lengthUTF8 - 1, methodName.toUTF8(),\n        args.byteLength, args.buffer.data,\n        mana)\n    };\n  }\n\n  /**\n   * Returns the promise as a result of your function. Don't return any other results from the function.\n   * Your current function should be `void` and shouldn't return anything else. E.g.\n   * ```\n   * export function callMetaNear(): void {\n   *   let itemArgs: AddItemArgs = {\n   *     accountId: \"alice.near\",\n   *     itemId: \"Sword +9000\",\n   *   };\n   *   let promise = ContractPromise.create(\n   *     \"metanear\",\n   *     \"addItem\",\n   *     itemArgs.encode(),\n   *     0,\n   *     0,\n   *   );\n   *   promise.returnAsResult();\n   * }\n   * ```\n   *\n   * Now when you call `callMetaNear` method, it creates new promise to `metanear` contract.\n   * And saying that the result of the current execution depends on the result `addItem`.\n   * Even though this contract is not going to be called with a callback, the contract which\n   * calling `callMetaNear` would receive the result from `addItem`. This call essentially acts\n   * as a proxy.\n   *\n   * You can also attach a callback on top of the promise before returning it, e.g.\n   *\n   * ```\n   *   ...\n   *   let promise = ContractPromise.create(\n   *      ...\n   *   );\n   *   // Setting up args for the callback\n   *   let requestArgs: OnItemAddedArgs = {\n   *     \"itemAddedRequestId\": \"UNIQUE_REQUEST_ID\",\n   *   };\n   *   let callbackPromise = promise.then(\n   *      \"_onItemAdded\",\n   *      requestArgs.encode(),\n   *      2,  // Attaching 2 additional requests, in case we need to do another call\n   *   );\n   *   callbackPromise.returnAsResult();\n   * }\n   * ```\n   */\n  returnAsResult(): void {\n    return_promise(this.id);\n  }\n\n  /**\n   * Joins multiple async call promises into one, to aggregate results before the callback.\n   * NOTE: Given promises can only be new async calls and can't be callbacks.\n   * Joined promise can't be returned as a result\n   * @param promises List of async call promises to join.\n   */\n  static all(promises: ContractPromise[]): ContractPromise {\n    assert(promises.length > 0);\n    let id = promises[0].id;\n    for (let i = 1; i < promises.length; i++) {\n      id = promise_and(id, promises[i].id);\n    }\n    return { id };\n  }\n\n  /**\n   * Method to receive async (one or multiple) results from the remote contract in the callback.\n   * Example of using it.\n   * ```\n   * // This function is prefixed with `_`, so other contracts or people can't call it directly.\n   * export function _onItemAdded(itemAddedRequestId: string): bool {\n   *   // Get all results\n   *   let results = ContractPromise.getResults();\n   *   let addItemResult = results[0];\n   *   // Verifying the remote contract call succeeded.\n   *   if (addItemResult.success) {\n   *     // Decoding data from the bytes buffer into the local object.\n   *     let data = AddItemResult.decode(addItemResult.buffer);\n   *     if (data.itemPower > 9000) {\n   *       return true;\n   *     }\n   *   }\n   *   return false;\n   * }\n   * ```\n   * @returns An array of results based on the number of promises the callback was created on.\n   *     If the callback using `then` was scheduled only on one result, then one result will be returned.\n   */\n  static getResults() : ContractPromiseResult[] {\n    let count = <i32>result_count();\n    let results = new Array<ContractPromiseResult>(count);\n    for (let i = 0; i < count; i++) {\n      let isOk = result_is_ok(i);\n      if (!isOk) {\n        results[i] = { success: false }\n        continue;\n      }\n      let buffer = storage._internalReadBytes(DATA_TYPE_RESULT, 0, i);\n      results[i] = { success: isOk, buffer: buffer };\n    }\n    return results;\n  }\n}\n\n/**\n * Class to store results of the async calls on the remote contracts.\n */\nexport class ContractPromiseResult {\n  // Whether the execution of the remote call succeeded.\n  success: bool;\n  // Bytes data returned by the remote contract. Can be empty or null, if the remote\n  // method returns `void`.\n  buffer: Uint8Array;\n}\n\n@external(\"env\", \"storage_write\")\ndeclare function storage_write(key_len: usize, key_ptr: usize, value_len: usize, value_ptr: usize): void;\n@external(\"env\", \"storage_remove\")\ndeclare function storage_remove(key_len: usize, key_ptr: usize): void;\n@external(\"env\", \"storage_has_key\")\ndeclare function storage_has_key(key_len: usize, key_ptr: usize): bool;\n@external(\"env\", \"storage_iter\")\ndeclare function storage_iter(prefix_len: usize, prefix_ptr: usize): u32;\n@external(\"env\", \"storage_range\")\ndeclare function storage_range(start_len: usize, start_ptr: usize, end_len: usize, end_ptr: usize): u32;\n@external(\"env\", \"storage_iter_next\")\ndeclare function storage_iter_next(id: u32): u32;\n\n@external(\"env\", \"result_count\")\ndeclare function result_count(): u32;\n@external(\"env\", \"result_is_ok\")\ndeclare function result_is_ok(index: u32): bool;\n\n@external(\"env\", \"return_value\")\ndeclare function return_value(value_len: usize, value_ptr: usize): void;\n@external(\"env\", \"return_promise\")\ndeclare function return_promise(promise_index: u32): void;\n\n@external(\"env\", \"data_read\")\ndeclare function data_read(type_index: u32, key_len: usize, key: usize, max_buf_len: usize, buf_ptr: usize): usize;\n\n@external(\"env\", \"promise_create\")\ndeclare function promise_create(\n    account_id_len: usize, account_id_ptr: usize,\n    method_name_len: usize, method_name_ptr: usize,\n    args_len: usize, args_ptr: usize,\n    mana: u32,\n    amount: u64): u32;\n\n@external(\"env\", \"promise_then\")\ndeclare function promise_then(\n    promise_index: u32,\n    method_name_len: usize, method_name_ptr: usize,\n    args_len: usize, args_ptr: usize,\n    mana: u32): u32;\n\n@external(\"env\", \"promise_and\")\ndeclare function promise_and(promise_index1: u32, promise_index2: u32): u32;\n\n/**\n * @hidden\n * Hash buffer is 32 bytes\n */\n@external(\"env\", \"hash\")\ndeclare function _near_hash(value_len: usize, value_ptr: usize, buf_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"hash32\")\ndeclare function _near_hash32(value_len: usize, value_ptr: usize): u32;\n\n/**\n * @hidden\n * Fills given buffer with random u8.\n */\n@external(\"env\", \"random_buf\")\ndeclare function _near_random_buf(buf_len: u32, buf_ptr: usize): void\n\n/**\n * @hidden\n */\n@external(\"env\", \"random32\")\ndeclare function random32(): u32;\n\n/**\n * @hidden\n */\n@external(\"env\", \"log\")\ndeclare function _near_log(msg_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"balance\")\ndeclare function balance(): u64;\n\n/**\n * @hidden\n */\n@external(\"env\", \"mana_left\")\ndeclare function mana_left(): u32;\n\n/**\n * @hidden\n */\n@external(\"env\", \"gas_left\")\ndeclare function gas_left(): u64;\n\n/**\n * @hidden\n */\n@external(\"env\", \"received_amount\")\ndeclare function received_amount(): u64;\n\n/**\n * @hidden\n */\n@external(\"env\", \"block_index\")\ndeclare function block_index(): u64;\n","import { memcmp, memmove, memset } from \"./internal/memory\";\n\n@builtin export declare const HEAP_BASE: usize; // tslint:disable-line\n\n/* tslint:disable */\n\nexport namespace memory {\n\n  @builtin export declare function size(): i32;\n\n  @builtin export declare function grow(pages: i32): i32;\n\n  @builtin @inline\n  export function fill(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n    memset(dest, c, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  @builtin @inline\n  export function copy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n    memmove(dest, src, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  @inline export function compare(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n    return memcmp(vl, vr, n);\n  }\n\n  // Passive segments\n\n  // export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n  //   __memory_init(segmentIndex, srcOffset, dstOffset);\n  // }\n\n  // export function drop(segmentIndex: u32): void {\n  //   __memory_drop(segmentIndex);\n  // }\n\n  // Allocator\n\n  @inline export function allocate(size: usize): usize {\n    if (isDefined(__memory_allocate)) return __memory_allocate(size);\n    WARNING(\"Calling 'memory.allocate' requires a memory manager to be present.\");\n    return <usize>unreachable();\n  }\n\n  @inline export function free(ptr: usize): void {\n    if (isDefined(__memory_free)) { __memory_free(ptr); return; }\n    WARNING(\"Calling 'memory.free' requires a memory manager to be present.\");\n    unreachable();\n  }\n\n  @inline export function reset(): void {\n    if (isDefined(__memory_reset)) { __memory_reset(); return; }\n    unreachable();\n  }\n}\n","/** Number of alignment bits. */\n@inline export const AL_BITS: u32 = 3;\n/** Number of possible alignment values. */\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n/** Mask to obtain just the alignment bits. */\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n/** Maximum 32-bit allocation size. */\n@inline export const MAX_SIZE_32: usize = 1 << 30; // 1GB\n","/**\n * Arena Memory Allocator\n *\n * Provides a `memory.reset` function to reset the heap to its initial state. A user has to make\n * sure that there are no more references to cleared memory afterwards. Always aligns to 8 bytes.\n *\n * @module std/assembly/allocator/arena\n *//***/\n\nimport { AL_MASK, MAX_SIZE_32 } from \"../internal/allocator\";\n\nvar startOffset: usize = (HEAP_BASE + AL_MASK) & ~AL_MASK;\nvar offset: usize = startOffset;\n\n// Memory allocator interface\n\n@global export function __memory_allocate(size: usize): usize {\n  if (size > MAX_SIZE_32) unreachable();\n  var ptr = offset;\n  var newPtr = (ptr + max<usize>(size, 1) + AL_MASK) & ~AL_MASK;\n  var pagesBefore = memory.size();\n  if (newPtr > <usize>pagesBefore << 16) {\n    let pagesNeeded = ((newPtr - ptr + 0xffff) & ~0xffff) >>> 16;\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n    if (memory.grow(pagesWanted) < 0) {\n      if (memory.grow(pagesNeeded) < 0) {\n        unreachable(); // out of memory\n      }\n    }\n  }\n  offset = newPtr;\n  return ptr;\n}\n\n@global export function __memory_free(ptr: usize): void { /* nop */ }\n\n@global export function __memory_reset(): void {\n  offset = startOffset;\n}\n","import {\n  AL_MASK,\n  MAX_SIZE_32\n } from \"./allocator\";\n\n/** Size of an ArrayBuffer header. */\n@inline export const HEADER_SIZE: usize = (offsetof<ArrayBuffer>() + AL_MASK) & ~AL_MASK;\n/** Maximum byte length of an ArrayBuffer. */\n@inline export const MAX_BLENGTH: i32 = <i32>MAX_SIZE_32 - HEADER_SIZE;\n\nfunction computeSize(byteLength: i32): usize {\n  // round up to power of 2, with HEADER_SIZE=8:\n  // 0            -> 2^3  = 8\n  // 1..8         -> 2^4  = 16\n  // 9..24        -> 2^5  = 32\n  // ...\n  // MAX_LENGTH   -> 2^30 = 0x40000000 (MAX_SIZE_32)\n  return <usize>1 << <usize>(<u32>32 - clz<u32>(byteLength + HEADER_SIZE - 1));\n}\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(byteLength: i32): ArrayBuffer {\n  assert(<u32>byteLength <= <u32>MAX_BLENGTH);\n  var buffer: usize;\n  if (isManaged<ArrayBuffer>()) {\n    buffer = __gc_allocate(computeSize(byteLength), __gc); // tslint:disable-line\n  } else {\n    buffer = memory.allocate(computeSize(byteLength));\n  }\n  store<i32>(buffer, byteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  return changetype<ArrayBuffer>(buffer);\n}\n\nexport function reallocateUnsafe(buffer: ArrayBuffer, newByteLength: i32): ArrayBuffer {\n  var oldByteLength = buffer.byteLength;\n  if (newByteLength > oldByteLength) {\n    assert(newByteLength <= MAX_BLENGTH);\n    if (newByteLength <= <i32>(computeSize(oldByteLength) - HEADER_SIZE)) { // fast path: zero out additional space\n      store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n    } else { // slow path: copy to new buffer\n      let newBuffer = allocateUnsafe(newByteLength);\n      memory.copy(\n        changetype<usize>(newBuffer) + HEADER_SIZE,\n        changetype<usize>(buffer) + HEADER_SIZE,\n        <usize>oldByteLength\n      );\n      if (!isManaged<ArrayBuffer>()) {\n        memory.free(changetype<usize>(buffer));\n      }\n      buffer = newBuffer;\n    }\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE + <usize>oldByteLength,\n      0,\n      <usize>(newByteLength - oldByteLength)\n    );\n  } else if (newByteLength < oldByteLength) { // fast path: override size\n    // TBD: worth to copy and release if size is significantly less than before?\n    assert(newByteLength >= 0);\n    store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  }\n  return buffer;\n}\n\n// The helpers below use two different types in order to emit loads and stores that load respectively\n// store one type to/from memory while returning/taking the desired output/input type. This allows to\n// emit instructions like\n//\n// * `i32.load8` ^= `<i32>load<i8>(...)` that reads an i8 but returns an i32, or\n// * `i64.load32_s` ^= `<i64>load<i32>(...)`) that reads a 32-bit as a 64-bit integer\n//\n// without having to emit an additional instruction for conversion purposes. The second parameter\n// can be omitted for references and other loads and stores that simply return the exact type.\n\n@inline export function LOAD<T,TOut = T>(buffer: ArrayBuffer, index: i32, byteOffset: i32 = 0): TOut {\n  return <TOut>load<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, HEADER_SIZE);\n}\n\n@inline export function STORE<T,TIn = T>(buffer: ArrayBuffer, index: i32, value: TIn, byteOffset: i32 = 0): void {\n  store<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, value, HEADER_SIZE);\n}\n","import { MAX_SIZE_32 } from \"./allocator\";\nimport { String } from \"../string\";\n\n/** Size of a String header. */\n@inline export const HEADER_SIZE = (offsetof<String>() + 1) & ~1; // 2 byte aligned\n/** Maximum length of a String. */\n@inline export const MAX_LENGTH = (<i32>MAX_SIZE_32 - HEADER_SIZE) >>> 1;\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(length: i32): String {\n  assert(length > 0 && length <= MAX_LENGTH);\n  var buffer: usize;\n  if (isManaged<String>()) {\n    buffer = __gc_allocate(HEADER_SIZE + (<usize>length << 1), __gc);  // tslint:disable-line\n  } else {\n    buffer = memory.allocate(HEADER_SIZE + (<usize>length << 1));\n  }\n  store<i32>(buffer, length);\n  return changetype<String>(buffer);\n}\n\n@inline\nexport function freeUnsafe(buffer: String): void {\n  if (!isManaged<String>()) {\n    assert(buffer);\n    memory.free(changetype<usize>(buffer));\n  }\n}\n\nexport function copyUnsafe(dest: String, destOffset: usize, src: String, srcOffset: usize, len: usize): void {\n  memory.copy(\n    changetype<usize>(dest) + (destOffset << 1) + HEADER_SIZE,\n    changetype<usize>(src)  + (srcOffset  << 1) + HEADER_SIZE,\n    len << 1\n  );\n}\n\nexport function compareUnsafe(str1: String, offset1: usize, str2: String, offset2: usize, len: usize): i32 {\n  var cmp: i32 = 0;\n  var ptr1 = changetype<usize>(str1) + (offset1 << 1);\n  var ptr2 = changetype<usize>(str2) + (offset2 << 1);\n  while (len && !(cmp = <i32>load<u16>(ptr1, HEADER_SIZE) - <i32>load<u16>(ptr2, HEADER_SIZE))) {\n    --len, ptr1 += 2, ptr2 += 2;\n  }\n  return cmp;\n}\n\nexport function repeatUnsafe(dest: String, destOffset: usize, src: String, count: i32): void {\n  var length = src.length;\n  if (ASC_SHRINK_LEVEL > 1) {\n    let strLen = length << 1;\n    let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\n    let from = changetype<usize>(src)  + HEADER_SIZE;\n    for (let i = 0, len = strLen * count; i < len; i += strLen) {\n      memory.copy(to + i, from, strLen);\n    }\n  } else {\n    switch (length) {\n      case 0: break;\n      case 1: {\n        let cc =  load<u16>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u16>(out + (i << 1), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      case 2: {\n        let cc  = load<u32>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u32>(out + (i << 2), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      case 3: {\n        let cc1 = load<u32>(changetype<usize>(src), HEADER_SIZE + 0);\n        let cc2 = load<u16>(changetype<usize>(src), HEADER_SIZE + 4);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u32>(out + (i << 2), cc1, HEADER_SIZE + 0);\n          store<u16>(out + (i << 1), cc2, HEADER_SIZE + 4);\n        }\n        break;\n      }\n      case 4: {\n        let cc = load<u64>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u64>(out + (i << 3), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      default: {\n        let strLen = length << 1;\n        let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\n        let from = changetype<usize>(src)  + HEADER_SIZE;\n        for (let i = 0, len = strLen * count; i < len; i += strLen) {\n          memory.copy(to + i, from, strLen);\n        }\n        break;\n      }\n    }\n  }\n}\n\n// Helpers\n\n@inline export const enum CharCode {\n  PLUS = 0x2B,\n  MINUS = 0x2D,\n  DOT = 0x2E,\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n  A = 0x41,\n  B = 0x42,\n  E = 0x45,\n  N = 0x4E,\n  O = 0x4F,\n  X = 0x58,\n  Z = 0x5a,\n  a = 0x61,\n  b = 0x62,\n  e = 0x65,\n  n = 0x6E,\n  o = 0x6F,\n  x = 0x78,\n  z = 0x7A\n}\n\nexport function isWhiteSpaceOrLineTerminator(c: u16): bool {\n  switch (c) {\n    case 9:    // <TAB>\n    case 10:   // <LF>\n    case 13:   // <CR>\n    case 11:   // <VT>\n    case 12:   // <FF>\n    case 32:   // <SP>\n    case 160:  // <NBSP>\n    case 8232: // <LS>\n    case 8233: // <PS>\n    case 65279: return true; // <ZWNBSP>\n    default: return false;\n  }\n}\n\n/** Parses a string to an integer (usually), using the specified radix. */\nexport function parse<T>(str: String, radix: i32 = 0): T {\n  var len: i32 = str.length;\n  if (!len) return <T>NaN;\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <i32>load<u16>(ptr, HEADER_SIZE);\n\n  // determine sign\n  var sign: T;\n  if (code == CharCode.MINUS) {\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = 1;\n  } else {\n    sign = 1;\n  }\n\n  // determine radix\n  if (!radix) {\n    if (code == CharCode._0 && len > 2) {\n      switch (<i32>load<u16>(ptr + 2, HEADER_SIZE)) {\n        case CharCode.B:\n        case CharCode.b: {\n          ptr += 4; len -= 2;\n          radix = 2;\n          break;\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          ptr += 4; len -= 2;\n          radix = 8;\n          break;\n        }\n        case CharCode.X:\n        case CharCode.x: {\n          ptr += 4; len -= 2;\n          radix = 16;\n          break;\n        }\n        default: radix = 10;\n      }\n    } else radix = 10;\n  } else if (radix < 2 || radix > 36) {\n    return <T>NaN;\n  }\n\n  // calculate value\n  var num: T = 0;\n  while (len--) {\n    code = <i32>load<u16>(ptr, HEADER_SIZE);\n    if (code >= CharCode._0 && code <= CharCode._9) {\n      code -= CharCode._0;\n    } else if (code >= CharCode.A && code <= CharCode.Z) {\n      code -= CharCode.A - 10;\n    } else if (code >= CharCode.a && code <= CharCode.z) {\n      code -= CharCode.a - 10;\n    } else break;\n    if (code >= radix) break;\n    num = (num * radix) + code;\n    ptr += 2;\n  }\n  return sign * num;\n}\n","import {\n  HEADER_SIZE as AB_HEADER_SIZE,\n  MAX_BLENGTH as AB_MAX_BLENGTH,\n  allocateUnsafe,\n  LOAD,\n  STORE\n} from \"./arraybuffer\";\n\nimport {\n  SORT as SORT_IMPL\n} from \"./sort\";\n\n/** Typed array base class. Not a global object. */\nexport abstract class TypedArray<T> {\n  [key: number]: T; // compatibility only\n\n  readonly buffer: ArrayBuffer;\n  readonly byteOffset: i32;\n  readonly byteLength: i32;\n\n  constructor(length: i32) {\n    const MAX_LENGTH = <u32>AB_MAX_BLENGTH / sizeof<T>();\n    if (<u32>length > MAX_LENGTH) throw new RangeError(\"Invalid typed array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    memory.fill(changetype<usize>(buffer) + AB_HEADER_SIZE, 0, <usize>byteLength);\n    this.buffer = buffer;\n    this.byteOffset = 0;\n    this.byteLength = byteLength;\n  }\n\n  @inline\n  get length(): i32 {\n    return this.byteLength >>> alignof<T>();\n  }\n\n  @operator(\"[]\")\n  protected __get(index: i32): T {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @inline @operator(\"{}\")\n  protected __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @operator(\"[]=\")\n  protected __set(index: i32, value: native<T>): void {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    STORE<T,native<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  @inline @operator(\"{}=\")\n  protected __unchecked_set(index: i32, value: native<T>): void {\n    STORE<T,native<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  // copyWithin(target: i32, start: i32, end: i32 = this.length): this\n}\n\n@inline\nexport function FILL<TArray extends TypedArray<T>, T extends number>(\n  array: TArray,\n  value: native<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  var len = array.length;\n  start = start < 0 ? max(len + start, 0) : min(start, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  if (sizeof<T>() == 1) {\n    if (start < end) {\n      memory.fill(\n        changetype<usize>(buffer) + start + byteOffset + AB_HEADER_SIZE,\n        <u8>value,\n        <usize>(end - start)\n      );\n    }\n  } else {\n    for (; start < end; ++start) {\n      STORE<T,native<T>>(buffer, start, value, byteOffset);\n    }\n  }\n  return array;\n}\n\n@inline\nexport function SORT<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  comparator: (a: T, b: T) => i32\n): TArray {\n  var byteOffset = array.byteOffset;\n  var length = array.length;\n  if (length <= 1) return array;\n  var buffer = array.buffer;\n  if (length == 2) {\n    let a = LOAD<T>(buffer, 1, byteOffset);\n    let b = LOAD<T>(buffer, 0, byteOffset);\n    if (comparator(a, b) < 0) {\n      STORE<T>(buffer, 1, b, byteOffset);\n      STORE<T>(buffer, 0, a, byteOffset);\n    }\n    return array;\n  }\n  SORT_IMPL<T>(buffer, byteOffset, length, comparator);\n  return array;\n}\n\n@inline\nexport function SUBARRAY<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var length = <i32>array.length;\n  if (begin < 0) begin = max(length + begin, 0);\n  else begin = min(begin, length);\n  if (end < 0) end = max(length + end, begin);\n  else end = max(min(end, length), begin);\n  var slice = memory.allocate(offsetof<TArray>());\n  store<usize>(slice, array.buffer, offsetof<TArray>(\"buffer\"));\n  store<i32>(slice, <i32>array.byteOffset + (begin << alignof<T>()), offsetof<TArray>(\"byteOffset\"));\n  store<i32>(slice, (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(slice);\n}\n\n@inline\nexport function REDUCE<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    initialValue = callbackfn(\n      initialValue,\n      LOAD<T>(buffer, i, byteOffset),\n      i,\n      array,\n    );\n  }\n  return initialValue;\n}\n\n@inline\nexport function REDUCE_RIGHT<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = array.length - 1; i >= 0; i--) {\n    initialValue = callbackfn(\n      initialValue,\n      LOAD<T>(buffer, i, byteOffset),\n      i,\n      array,\n    );\n  }\n  return initialValue;\n}\n\n@inline\nexport function MAP<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  var result = instantiate<TArray>(length);\n  var resultBuffer = result.buffer;\n  for (let i = 0; i < length; i++) {\n    STORE<T, native<T>>(resultBuffer, i, <native<T>>callbackfn(LOAD<T>(buffer, i, byteOffset), i, array));\n  }\n\n  return result;\n}\n\n@inline\nexport function FIND_INDEX<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\n): i32 {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n@inline\nexport function SOME<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n@inline\nexport function EVERY<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n","// this function will go away once `memory.copy` becomes an intrinsic\nexport function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  var w: u32, x: u32;\n\n  // copy 1 byte each until src is aligned to 4 bytes\n  while (n && (src & 3)) {\n    store<u8>(dest++, load<u8>(src++));\n    n--;\n  }\n\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\n  if ((dest & 3) == 0) {\n    while (n >= 16) {\n      store<u32>(dest     , load<u32>(src     ));\n      store<u32>(dest +  4, load<u32>(src +  4));\n      store<u32>(dest +  8, load<u32>(src +  8));\n      store<u32>(dest + 12, load<u32>(src + 12));\n      src += 16; dest += 16; n -= 16;\n    }\n    if (n & 8) {\n      store<u32>(dest    , load<u32>(src    ));\n      store<u32>(dest + 4, load<u32>(src + 4));\n      dest += 8; src += 8;\n    }\n    if (n & 4) {\n      store<u32>(dest, load<u32>(src));\n      dest += 4; src += 4;\n    }\n    if (n & 2) { // drop to 2 bytes each\n      store<u16>(dest, load<u16>(src));\n      dest += 2; src += 2;\n    }\n    if (n & 1) { // drop to 1 byte\n      store<u8>(dest++, load<u8>(src++));\n    }\n    return;\n  }\n\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\n  if (n >= 32) {\n    switch (dest & 3) {\n      // known to be != 0\n      case 1: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 3;\n        while (n >= 17) {\n          x = load<u32>(src + 1);\n          store<u32>(dest, w >> 24 | x << 8);\n          w = load<u32>(src + 5);\n          store<u32>(dest + 4, x >> 24 | w << 8);\n          x = load<u32>(src + 9);\n          store<u32>(dest + 8, w >> 24 | x << 8);\n          w = load<u32>(src + 13);\n          store<u32>(dest + 12, x >> 24 | w << 8);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 2: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 2;\n        while (n >= 18) {\n          x = load<u32>(src + 2);\n          store<u32>(dest, w >> 16 | x << 16);\n          w = load<u32>(src + 6);\n          store<u32>(dest + 4, x >> 16 | w << 16);\n          x = load<u32>(src + 10);\n          store<u32>(dest + 8, w >> 16 | x << 16);\n          w = load<u32>(src + 14);\n          store<u32>(dest + 12, x >> 16 | w << 16);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 3: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        n -= 1;\n        while (n >= 19) {\n          x = load<u32>(src + 3);\n          store<u32>(dest, w >> 8 | x << 24);\n          w = load<u32>(src + 7);\n          store<u32>(dest + 4, x >> 8 | w << 24);\n          x = load<u32>(src + 11);\n          store<u32>(dest + 8, w >> 8 | x << 24);\n          w = load<u32>(src + 15);\n          store<u32>(dest + 12, x >> 8 | w << 24);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n    }\n  }\n\n  // copy remaining bytes one by one\n  if (n & 16) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 8) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 4) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 2) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 1) {\n    store<u8>(dest++, load<u8>(src++));\n  }\n}\n\n// this function will go away once `memory.copy` becomes an intrinsic\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (src + n <= dest || dest + n <= src) {\n    memcpy(dest, src, n);\n    return;\n  }\n  if (dest < src) {\n    if ((src & 7) == (dest & 7)) {\n      while (dest & 7) {\n        if (!n) return;\n        --n;\n        store<u8>(dest++, load<u8>(src++));\n      }\n      while (n >= 8) {\n        store<u64>(dest, load<u64>(src));\n        n    -= 8;\n        dest += 8;\n        src  += 8;\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if ((src & 7) == (dest & 7)) {\n      while ((dest + n) & 7) {\n        if (!n) return;\n        store<u8>(dest + --n, load<u8>(src + n));\n      }\n      while (n >= 8) {\n        n -= 8;\n        store<u64>(dest + n, load<u64>(src + n));\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// this function will go away once `memory.fill` becomes an intrinsic\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n\n  // fill head and tail with minimal branching\n  if (!n) return;\n  store<u8>(dest, c);\n  store<u8>(dest + n - 1, c);\n  if (n <= 2) return;\n\n  store<u8>(dest + 1, c);\n  store<u8>(dest + 2, c);\n  store<u8>(dest + n - 2, c);\n  store<u8>(dest + n - 3, c);\n  if (n <= 6) return;\n  store<u8>(dest + 3, c);\n  store<u8>(dest + n - 4, c);\n  if (n <= 8) return;\n\n  // advance pointer to align it at 4-byte boundary\n  var k: usize = -dest & 3;\n  dest += k;\n  n -= k;\n  n &= -4;\n\n  var c32: u32 = <u32>-1 / 255 * c;\n\n  // fill head/tail up to 28 bytes each in preparation\n  store<u32>(dest, c32);\n  store<u32>(dest + n - 4, c32);\n  if (n <= 8) return;\n  store<u32>(dest + 4, c32);\n  store<u32>(dest + 8, c32);\n  store<u32>(dest + n - 12, c32);\n  store<u32>(dest + n - 8, c32);\n  if (n <= 24) return;\n  store<u32>(dest + 12, c32);\n  store<u32>(dest + 16, c32);\n  store<u32>(dest + 20, c32);\n  store<u32>(dest + 24, c32);\n  store<u32>(dest + n - 28, c32);\n  store<u32>(dest + n - 24, c32);\n  store<u32>(dest + n - 20, c32);\n  store<u32>(dest + n - 16, c32);\n\n  // align to a multiple of 8\n  k = 24 + (dest & 4);\n  dest += k;\n  n -= k;\n\n  // copy 32 bytes each\n  var c64: u64 = <u64>c32 | (<u64>c32 << 32);\n  while (n >= 32) {\n    store<u64>(dest, c64);\n    store<u64>(dest + 8, c64);\n    store<u64>(dest + 16, c64);\n    store<u64>(dest + 24, c64);\n    n -= 32;\n    dest += 32;\n  }\n}\n\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n  if (vl == vr) return 0;\n  while (n != 0 && load<u8>(vl) == load<u8>(vr)) {\n    n--; vl++; vr++;\n  }\n  return n ? <i32>load<u8>(vl) - <i32>load<u8>(vr) : 0;\n}\n","declare function logStr(str: string): void;\ndeclare function logF64(val: f64): void;\n\n/**\n * Extend from this class to handle events from parser.\n * Default implementation traverses whole object tree and does nothing.\n */\nexport abstract class JSONHandler {\n    setString(name: string, value: string): void {\n    }\n\n    setBoolean(name: string, value: bool): void {\n    }\n\n    setNull(name: string): void {\n    }\n\n    setInteger(name: string, value: i64): void {\n    }\n\n    pushArray(name: string): bool {\n        return true;\n    }\n\n    popArray(): void {\n    }\n\n    pushObject(name: string): bool {\n        return true;\n    }\n\n    popObject(): void {\n    }\n}\n\n/**\n * Extend from this class to handle events from parser.\n * This implementation crashes on every unimplemented set/push method\n * to allow easier validation of input.\n */\nexport class ThrowingJSONHandler extends JSONHandler {\n    setString(name: string, value: string): void {\n       assert(false, 'Unexpected string field ' + name + ' : \"' + value + '\"');\n    }\n\n    setBoolean(name: string, value: bool): void {\n       assert(false, 'Unexpected bool field ' + name + ' : ' + (value ? 'true' : 'false'));\n    }\n\n    setNull(name: string): void {\n       assert(false, 'Unexpected null field ' + name);\n    }\n\n    setInteger(name: string, value: i64): void {\n       assert(false, 'Unexpected integer field ' + name + ' : ' + value.toString());\n    }\n\n    pushArray(name: string): bool {\n        assert(false, 'Unexpected array field ' + name);\n        return true;\n    }\n\n    pushObject(name: string): bool {\n        assert(false, 'Unexpected object field ' + name);\n        return true;\n    }\n}\n\nconst TRUE_STR = \"true\";\nconst FALSE_STR = \"false\";\nconst NULL_STR = \"null\";\nlet CHAR_0 = \"0\".charCodeAt(0);\nlet CHAR_9 = \"9\".charCodeAt(0);\nlet CHAR_A = \"A\".charCodeAt(0);\nlet CHAR_A_LOWER = \"a\".charCodeAt(0);\n\nexport class DecoderState {\n    readIndex: i32 = 0;\n    buffer: Uint8Array = null;\n    lastKey: string = null;\n}\n\nexport class JSONDecoder<JSONHandlerT extends JSONHandler> {\n\n    handler: JSONHandlerT;\n    state: DecoderState;\n\n    constructor(handler: JSONHandlerT) {\n        this.handler = handler;\n    }\n\n    deserialize(buffer: Uint8Array, decoderState: DecoderState = null): void {\n        if (decoderState) {\n            this.state = decoderState;\n        } else {\n            this.state = new DecoderState();\n            this.state.readIndex = 0;\n            this.state.buffer = buffer;\n            this.state.lastKey = null;\n        }\n\n        assert(this.parseValue(), \"Cannot parse JSON\");\n        // TODO: Error if input left\n    }\n\n    private peekChar(): i32 {\n        if (this.state.readIndex >= this.state.buffer.length) {\n          return -1;\n        }\n        return this.state.buffer[this.state.readIndex];\n    }\n\n    private readChar(): i32 {\n        assert(this.state.readIndex < this.state.buffer.length, \"Unexpected input end\");\n        return this.state.buffer[this.state.readIndex++];\n    }\n\n    private parseValue(): bool {\n        this.skipWhitespace();\n        let result = this.parseObject()\n            || this.parseArray()\n            || this.parseString()\n            || this.parseBoolean()\n            || this.parseNumber()\n            || this.parseNull()\n        this.skipWhitespace();\n        return result;\n    }\n\n    private parseObject(): bool {\n        if (this.peekChar() != \"{\".charCodeAt(0)) {\n            return false;\n        }\n        let key = this.state.lastKey;\n        this.state.lastKey = null;\n        if (this.handler.pushObject(key)) {\n            this.readChar();\n            this.skipWhitespace();\n\n            let firstItem = true;\n            while (this.peekChar() != \"}\".charCodeAt(0)) {\n                if (!firstItem) {\n                    assert(this.readChar() == \",\".charCodeAt(0), \"Expected ','\");\n                } else {\n                    firstItem = false;\n                }\n                this.parseKey();\n                this.parseValue();\n            }\n            assert(this.readChar() == \"}\".charCodeAt(0), \"Unexpected end of object\");\n        }\n        this.handler.popObject();\n        return true;\n    }\n\n    private parseKey(): void {\n        this.skipWhitespace();\n        this.state.lastKey = this.readString();\n        this.skipWhitespace();\n        assert(this.readChar() == \":\".charCodeAt(0), \"Expected ':'\");\n    }\n\n    private parseArray(): bool {\n        if (this.peekChar() != \"[\".charCodeAt(0)) {\n            return false;\n        }\n        let key = this.state.lastKey;\n        this.state.lastKey = null;\n        if (this.handler.pushArray(key)) {\n            this.readChar();\n            this.skipWhitespace();\n\n            let firstItem = true;\n            while (this.peekChar() != \"]\".charCodeAt(0)) {\n                if (!firstItem) {\n                    assert(this.readChar() == \",\".charCodeAt(0), \"Expected ','\");\n                } else {\n                    firstItem = false;\n                }\n                this.parseValue();\n            }\n            assert(this.readChar() == \"]\".charCodeAt(0), \"Unexpected end of array\");\n        }\n        this.handler.popArray();\n        return true;;\n    }\n\n    private parseString(): bool {\n        if (this.peekChar() != '\"'.charCodeAt(0)) {\n            return false;\n        }\n        this.handler.setString(this.state.lastKey, this.readString());\n        return true;\n    }\n\n    private readString(): string {\n        assert(this.readChar() == '\"'.charCodeAt(0), \"Expected double-quoted string\");\n        let savedIndex = this.state.readIndex;\n        let stringParts: Array<string> = null;\n        for (;;) {\n            let byte = this.readChar();\n            assert(byte >= 0x20, \"Unexpected control character\");\n            if (byte == '\"'.charCodeAt(0)) {\n                let s = String.fromUTF8(this.state.buffer.buffer.data + savedIndex, this.state.readIndex - savedIndex - 1);\n                if (stringParts == null) {\n                    return s;\n                }\n                stringParts.push(s);\n                return stringParts.join(\"\");\n            } else if (byte == \"\\\\\".charCodeAt(0)) {\n                if (stringParts == null) {\n                    stringParts = new Array<string>();\n                }\n                if (this.state.readIndex > savedIndex + 1) {\n                    stringParts.push(\n                        String.fromUTF8(this.state.buffer.buffer.data + savedIndex, this.state.readIndex - savedIndex - 1));\n                }\n                stringParts.push(this.readEscapedChar());\n                savedIndex = this.state.readIndex;\n            }\n        }\n        // Should never happen\n        return \"\";\n    }\n\n    private readEscapedChar(): string {\n        let byte = this.readChar();\n        // TODO: Use lookup table for anything except \\u\n        if (byte == '\"'.charCodeAt(0)) {\n            return '\"';\n        }\n        if (byte == \"\\\\\".charCodeAt(0)) {\n            return \"\\\\\";\n        }\n        if (byte == \"/\".charCodeAt(0)) {\n            return \"/\";\n        }\n        if (byte == \"b\".charCodeAt(0)) {\n            return \"\\b\";\n        }\n        if (byte == \"n\".charCodeAt(0)) {\n            return \"\\n\";\n        }\n        if (byte == \"r\".charCodeAt(0)) {\n            return \"\\r\";\n        }\n        if (byte == \"t\".charCodeAt(0)) {\n            return \"\\t\";\n        }\n        if (byte == \"u\".charCodeAt(0)) {\n            let d1 = this.readHexDigit();\n            let d2 = this.readHexDigit();\n            let d3 = this.readHexDigit();\n            let d4 = this.readHexDigit();\n            let charCode = d1 * 0x1000 + d2 * 0x100 + d3 * 0x10 + d4;\n            return String.fromCodePoint(charCode);\n        }\n        assert(false, \"Unexpected escaped character: \" + String.fromCharCode(byte));\n        return \"\";\n    }\n\n    private readHexDigit(): i32 {\n        let byte = this.readChar();\n        let digit = byte - CHAR_0;\n        if (digit > 9) {\n            digit = byte - CHAR_A + 10;\n            if (digit < 10 || digit > 15) {\n                digit = byte - CHAR_A_LOWER + 10;\n            }\n        }\n        let arr: Array<i32> = [byte, digit];\n        assert(digit >= 0 && digit < 16, \"Unexpected \\\\u digit\");\n        return digit;\n    }\n\n    private parseNumber(): bool {\n        // TODO: Parse floats\n        let number: i64 = 0;\n        let sign: i64 = 1;\n        if (this.peekChar() == \"-\".charCodeAt(0)) {\n            sign = -1;\n            this.readChar();\n        }\n        let digits = 0;\n        while (CHAR_0 <= this.peekChar() && this.peekChar() <= CHAR_9 ) {\n            let byte = this.readChar();\n            number *= 10;\n            number += byte - CHAR_0;\n            digits++;\n        }\n        if (digits > 0) {\n            this.handler.setInteger(this.state.lastKey, number * sign);\n            return true;\n        }\n        return false;\n    }\n\n    private parseBoolean(): bool {\n        if (this.peekChar() == FALSE_STR.charCodeAt(0)) {\n            this.readAndAssert(FALSE_STR);\n            this.handler.setBoolean(this.state.lastKey, false);\n            return true;\n        }\n        if (this.peekChar() == TRUE_STR.charCodeAt(0)) {\n            this.readAndAssert(TRUE_STR);\n            this.handler.setBoolean(this.state.lastKey, true);\n            return true;\n        }\n\n        return false;\n    }\n\n    private parseNull(): bool {\n        if (this.peekChar() == NULL_STR.charCodeAt(0)) {\n            this.readAndAssert(NULL_STR);\n            this.handler.setNull(this.state.lastKey);\n            return true;\n        }\n        return false;\n    }\n\n    private readAndAssert(str: string): void {\n        for (let i = 0; i < str.length; i++) {\n            assert(str.charCodeAt(i) == this.readChar(), \"Expected '\" + str + \"'\");\n        }\n    }\n\n    private skipWhitespace(): void {\n        while (this.isWhitespace(this.peekChar())) {\n            this.readChar();\n        }\n    }\n\n    private isWhitespace(charCode: i32): bool {\n        return charCode == 0x9 || charCode == 0xa || charCode == 0xd || charCode == 0x20;\n    }\n}\n","import {\n  HEADER_SIZE,\n  MAX_LENGTH,\n  allocateUnsafe,\n  compareUnsafe,\n  repeatUnsafe,\n  copyUnsafe,\n  isWhiteSpaceOrLineTerminator,\n  CharCode,\n  parse\n} from \"./internal/string\";\n\nimport {\n  STORE\n} from \"./internal/arraybuffer\";\n\n@sealed\nexport class String {\n\n  readonly length: i32; // capped to [0, MAX_LENGTH]\n\n  // TODO Add and handle second argument\n  static fromCharCode(code: i32): String {\n    var out = allocateUnsafe(1);\n    store<u16>(\n      changetype<usize>(out),\n      <u16>code,\n      HEADER_SIZE\n    );\n    return out;\n  }\n\n  static fromCodePoint(code: i32): String {\n    assert(<u32>code <= 0x10FFFF);\n    var sur = code > 0xFFFF;\n    var out = allocateUnsafe(<i32>sur + 1);\n    if (!sur) {\n      store<u16>(\n        changetype<usize>(out),\n        <u16>code,\n        HEADER_SIZE\n      );\n    } else {\n      code -= 0x10000;\n      let hi: u32 = (code >>> 10)  + 0xD800;\n      let lo: u32 = (code & 0x3FF) + 0xDC00;\n      store<u32>(\n        changetype<usize>(out),\n        (hi << 16) | lo,\n        HEADER_SIZE\n      );\n    }\n    return out;\n  }\n\n  @operator(\"[]\")\n  charAt(pos: i32): String {\n    assert(this !== null);\n\n    if (<u32>pos >= <u32>this.length) return changetype<String>(\"\");\n\n    var out = allocateUnsafe(1);\n    store<u16>(\n      changetype<usize>(out),\n      load<u16>(\n        changetype<usize>(this) + (<usize>pos << 1),\n        HEADER_SIZE\n      ),\n      HEADER_SIZE\n    );\n    return out;\n  }\n\n  charCodeAt(pos: i32): i32 {\n    assert(this !== null);\n    if (<u32>pos >= <u32>this.length) return -1; // (NaN)\n\n    return load<u16>(\n      changetype<usize>(this) + (<usize>pos << 1),\n      HEADER_SIZE\n    );\n  }\n\n  codePointAt(pos: i32): i32 {\n    assert(this !== null);\n    if (<u32>pos >= <u32>this.length) return -1; // (undefined)\n\n    var first = <i32>load<u16>(\n      changetype<usize>(this) + (<usize>pos << 1),\n      HEADER_SIZE\n    );\n    if (first < 0xD800 || first > 0xDBFF || pos + 1 == this.length) {\n      return first;\n    }\n    var second = <i32>load<u16>(\n      changetype<usize>(this) + ((<usize>pos + 1) << 1),\n      HEADER_SIZE\n    );\n    if (second < 0xDC00 || second > 0xDFFF) return first;\n    return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\n  }\n\n  @operator(\"+\")\n  private static __concat(left: String, right: String): String {\n    if (!changetype<usize>(left)) left = changetype<String>(\"null\");\n    return left.concat(right);\n  }\n\n  concat(other: String): String {\n    assert(this !== null);\n    if (other === null) other = changetype<String>(\"null\");\n\n    var thisLen: isize = this.length;\n    var otherLen: isize = other.length;\n    var outLen: usize = thisLen + otherLen;\n    if (outLen == 0) return changetype<String>(\"\");\n    var out = allocateUnsafe(outLen);\n    copyUnsafe(out, 0, this, 0, thisLen);\n    copyUnsafe(out, thisLen, other, 0, otherLen);\n    return out;\n  }\n\n  endsWith(searchString: String, endPosition: i32 = MAX_LENGTH): bool {\n    assert(this !== null);\n    if (searchString === null) return false;\n    var end = min(max(endPosition, 0), this.length);\n    var searchLength: isize = searchString.length;\n    var start: isize = end - searchLength;\n    if (start < 0) return false;\n    return !compareUnsafe(this, start, searchString, 0, searchLength);\n  }\n\n  @operator(\"==\")\n  private static __eq(left: String, right: String): bool {\n    if (left === right) return true;\n    if (left === null || right === null) return false;\n\n    var leftLength = left.length;\n    if (leftLength != right.length) return false;\n\n    return !compareUnsafe(left, 0, right, 0, leftLength);\n  }\n\n  @operator(\"!=\")\n  private static __ne(left: String, right: String): bool {\n    return !this.__eq(left, right);\n  }\n\n  @operator(\">\")\n  private static __gt(left: String, right: String): bool {\n    if (left === right || left === null || right === null) return false;\n\n    var leftLength  = left.length;\n    var rightLength = right.length;\n\n    if (!leftLength)  return false;\n    if (!rightLength) return true;\n\n    var length = <usize>min<i32>(leftLength, rightLength);\n    return compareUnsafe(left, 0, right, 0, length) > 0;\n  }\n\n  @operator(\">=\")\n  private static __gte(left: String, right: String): bool {\n    return !this.__lt(left, right);\n  }\n\n  @operator(\"<\")\n  private static __lt(left: String, right: String): bool {\n    if (left === right || left === null || right === null) return false;\n\n    var leftLength  = left.length;\n    var rightLength = right.length;\n\n    if (!rightLength) return false;\n    if (!leftLength)  return true;\n\n    var length = <usize>min<i32>(leftLength, rightLength);\n    return compareUnsafe(left, 0, right, 0, length) < 0;\n  }\n\n  @operator(\"<=\")\n  private static __lte(left: String, right: String): bool {\n    return !this.__gt(left, right);\n  }\n\n  @inline\n  includes(searchString: String, position: i32 = 0): bool {\n    return this.indexOf(searchString, position) != -1;\n  }\n\n  indexOf(searchString: String, fromIndex: i32 = 0): i32 {\n    assert(this !== null);\n    if (searchString === null) searchString = changetype<String>(\"null\");\n\n    var searchLen: isize = searchString.length;\n    if (!searchLen) return 0;\n    var len: isize = this.length;\n    if (!len) return -1;\n    var start = min<isize>(max<isize>(fromIndex, 0), len);\n    len -= searchLen;\n    for (let k: isize = start; k <= len; ++k) {\n      if (!compareUnsafe(this, k, searchString, 0, searchLen)) return <i32>k;\n    }\n    return -1;\n  }\n\n  lastIndexOf(searchString: String, fromIndex: i32 = i32.MAX_VALUE): i32 {\n    assert(this !== null);\n    if (searchString === null) searchString = changetype<String>(\"null\");\n\n    var len: isize = this.length;\n    var searchLen: isize = searchString.length;\n    if (!searchLen) return len;\n    if (!len) return -1;\n    var start = min<isize>(max(fromIndex, 0), len - searchLen);\n    for (let k = start; k >= 0; --k) {\n      if (!compareUnsafe(this, k, searchString, 0, searchLen)) return <i32>k;\n    }\n    return -1;\n  }\n\n  startsWith(searchString: String, position: i32 = 0): bool {\n    assert(this !== null);\n    if (searchString === null) searchString = changetype<String>(\"null\");\n\n    var pos: isize = position;\n    var len: isize = this.length;\n    var start = min(max(pos, 0), len);\n    var searchLength: isize = searchString.length;\n    if (searchLength + start > len) return false;\n    return !compareUnsafe(this, start, searchString, 0, searchLength);\n  }\n\n  substr(start: i32, length: i32 = i32.MAX_VALUE): String {\n    assert(this !== null);\n    var intStart: isize = start;\n    var end: isize = length;\n    var size: isize = this.length;\n    if (intStart < 0) intStart = max(size + intStart, 0);\n    var resultLength = min(max(end, 0), size - intStart);\n    if (resultLength <= 0) return changetype<String>(\"\");\n    var out = allocateUnsafe(resultLength);\n    copyUnsafe(out, 0, this, intStart, resultLength);\n    return out;\n  }\n\n  substring(start: i32, end: i32 = i32.MAX_VALUE): String {\n    assert(this !== null);\n    var len = this.length;\n    var finalStart = min(max(start, 0), len);\n    var finalEnd = min(max(end, 0), len);\n    var from = min<i32>(finalStart, finalEnd);\n    var to = max<i32>(finalStart, finalEnd);\n    len = to - from;\n    if (!len) return changetype<String>(\"\");\n    if (!from && to == this.length) return this;\n    var out = allocateUnsafe(len);\n    copyUnsafe(out, 0, this, from, len);\n    return out;\n  }\n\n  trim(): String {\n    assert(this !== null);\n    var length: usize = this.length;\n\n    while (\n      length &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (length << 1), HEADER_SIZE)\n      )\n    ) {\n      --length;\n    }\n    var start: usize = 0;\n    while (\n      start < length &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (start << 1), HEADER_SIZE)\n      )\n    ) {\n      ++start, --length;\n    }\n    if (!length) return changetype<String>(\"\");\n    if (!start && length == this.length) return this;\n    var out = allocateUnsafe(length);\n    copyUnsafe(out, 0, this, start, length);\n    return out;\n  }\n\n  @inline\n  trimLeft(): String {\n    return this.trimStart();\n  }\n\n  @inline\n  trimRight(): String {\n    return this.trimEnd();\n  }\n\n  trimStart(): String {\n    assert(this !== null);\n    var start: isize = 0;\n    var len: isize = this.length;\n    while (\n      start < len &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (start << 1), HEADER_SIZE)\n      )\n    ) {\n      ++start;\n    }\n    if (!start) return this;\n    var outLen = len - start;\n    if (!outLen) return changetype<String>(\"\");\n    var out = allocateUnsafe(outLen);\n    copyUnsafe(out, 0, this, start, outLen);\n    return out;\n  }\n\n  trimEnd(): String {\n    assert(this !== null);\n    var len: isize = this.length;\n    while (\n      len > 0 &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (len << 1), HEADER_SIZE)\n      )\n    ) {\n      --len;\n    }\n    if (len <= 0) return changetype<String>(\"\");\n    if (<i32>len == this.length) return this;\n    var out = allocateUnsafe(len);\n    copyUnsafe(out, 0, this, 0, len);\n    return out;\n  }\n\n  padStart(targetLength: i32, padString: String = changetype<String>(\" \")): String {\n    assert(this !== null);\n    var length = this.length;\n    var padLen = padString.length;\n    if (targetLength < length || !padLen) return this;\n    var len = targetLength - length;\n    var out = allocateUnsafe(targetLength);\n    if (len > padLen) {\n      let count = (len - 1) / padLen;\n      let base  = count * padLen;\n      let rest  = len - base;\n      repeatUnsafe(out, 0, padString, count);\n      if (rest) copyUnsafe(out, base, padString, 0, rest);\n    } else {\n      copyUnsafe(out, 0, padString, 0, len);\n    }\n    if (length) copyUnsafe(out, len, this, 0, length);\n    return out;\n  }\n\n  padEnd(targetLength: i32, padString: String = changetype<String>(\" \")): String {\n    assert(this !== null);\n    var length = this.length;\n    var padLen = padString.length;\n    if (targetLength < length || !padLen) return this;\n    var len = targetLength - length;\n    var out = allocateUnsafe(targetLength);\n    if (length) copyUnsafe(out, 0, this, 0, length);\n    if (len > padLen) {\n      let count = (len - 1) / padLen;\n      let base = count * padLen;\n      let rest = len - base;\n      repeatUnsafe(out, length, padString, count);\n      if (rest) copyUnsafe(out, base + length, padString, 0, rest);\n    } else {\n      copyUnsafe(out, length, padString, 0, len);\n    }\n    return out;\n  }\n\n  repeat(count: i32 = 0): String {\n    assert(this !== null);\n    var length = this.length;\n\n    // Most browsers can't handle strings 1 << 28 chars or longer\n    if (count < 0 || length * count > (1 << 28)) {\n      throw new RangeError(\"Invalid count value\");\n    }\n\n    if (count == 0 || !length) return changetype<String>(\"\");\n    if (count == 1) return this;\n\n    var result = allocateUnsafe(length * count);\n    repeatUnsafe(result, 0, this, count);\n    return result;\n  }\n\n  slice(beginIndex: i32, endIndex: i32 = i32.MAX_VALUE): String {\n    var len = this.length;\n    var begin = beginIndex < 0 ? max(beginIndex + len, 0) : min(beginIndex, len);\n    var end = endIndex < 0 ? max(endIndex + len, 0) : min(endIndex, len);\n    len = end - begin;\n    if (len <= 0) return changetype<String>(\"\");\n    var out = allocateUnsafe(len);\n    copyUnsafe(out, 0, this, begin, len);\n    return out;\n  }\n\n  split(separator: String = null, limit: i32 = i32.MAX_VALUE): String[] {\n    assert(this !== null);\n    if (!limit) return new Array<String>();\n    if (separator === null) return <String[]>[this];\n    var length: isize = this.length;\n    var sepLen: isize = separator.length;\n    if (limit < 0) limit = i32.MAX_VALUE;\n    if (!sepLen) {\n      if (!length) return new Array<String>();\n      // split by chars\n      length = min<isize>(length, <isize>limit);\n      let result = new Array<String>(length);\n      let buffer = <ArrayBuffer>result.buffer_;\n      for (let i: isize = 0; i < length; ++i) {\n        let char = allocateUnsafe(1);\n        store<u16>(\n          changetype<usize>(char),\n          load<u16>(\n            changetype<usize>(this) + (<usize>i << 1),\n            HEADER_SIZE\n          ),\n          HEADER_SIZE\n        );\n        STORE<String>(buffer, i, char);\n      }\n      return result;\n    } else if (!length) {\n      let result = new Array<String>(1);\n      unchecked(result[0] = changetype<String>(\"\"));\n      return result;\n    }\n    var result = new Array<String>();\n    var end = 0, start = 0, i = 0;\n    while ((end = this.indexOf(separator, start)) != -1) {\n      let len = end - start;\n      if (len > 0) {\n        let out = allocateUnsafe(len);\n        copyUnsafe(out, 0, this, start, len);\n        result.push(out);\n      } else {\n        result.push(changetype<String>(\"\"));\n      }\n      if (++i == limit) return result;\n      start = end + sepLen;\n    }\n    if (!start) {\n      let result = new Array<String>(1);\n      unchecked(result[0] = this);\n      return result;\n    }\n    var len = length - start;\n    if (len > 0) {\n      let out = allocateUnsafe(len);\n      copyUnsafe(out, 0, this, start, len);\n      result.push(out);\n    } else {\n      result.push(changetype<String>(\"\"));\n    }\n    return result;\n  }\n\n  toString(): String {\n    return this;\n  }\n\n  get lengthUTF8(): i32 {\n    var len = 1; // null terminated\n    var pos: usize = 0;\n    var end = <usize>this.length;\n    while (pos < end) {\n      let c = <u32>load<u16>(changetype<usize>(this) + (pos << 1), HEADER_SIZE);\n      if (c < 128) {\n        len += 1; ++pos;\n      } else if (c < 2048) {\n        len += 2; ++pos;\n      } else {\n        if (\n          (c & 0xFC00) == 0xD800 && pos + 1 < end &&\n          (<u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1), HEADER_SIZE) & 0xFC00) == 0xDC00\n        ) {\n          len += 4; pos += 2;\n        } else {\n          len += 3; ++pos;\n        }\n      }\n    }\n    return len;\n  }\n\n  static fromUTF8(ptr: usize, len: usize): String {\n    if (len < 1) return changetype<String>(\"\");\n    var ptrPos = <usize>0;\n    var buf = memory.allocate(<usize>len << 1);\n    var bufPos = <usize>0;\n    while (ptrPos < len) {\n      let cp = <u32>load<u8>(ptr + ptrPos++);\n      if (cp < 128) {\n        store<u16>(buf + bufPos, cp);\n        bufPos += 2;\n      } else if (cp > 191 && cp < 224) {\n        assert(ptrPos + 1 <= len);\n        store<u16>(buf + bufPos, (cp & 31) << 6 | load<u8>(ptr + ptrPos++) & 63);\n        bufPos += 2;\n      } else if (cp > 239 && cp < 365) {\n        assert(ptrPos + 3 <= len);\n        cp = (\n          (cp                       &  7) << 18 |\n          (load<u8>(ptr + ptrPos++) & 63) << 12 |\n          (load<u8>(ptr + ptrPos++) & 63) << 6  |\n           load<u8>(ptr + ptrPos++) & 63\n        ) - 0x10000;\n        store<u16>(buf + bufPos, 0xD800 + (cp >> 10));\n        bufPos += 2;\n        store<u16>(buf + bufPos, 0xDC00 + (cp & 1023));\n        bufPos += 2;\n      } else {\n        assert(ptrPos + 2 <= len);\n        store<u16>(buf + bufPos,\n          (cp                       & 15) << 12 |\n          (load<u8>(ptr + ptrPos++) & 63) << 6  |\n           load<u8>(ptr + ptrPos++) & 63\n        );\n        bufPos += 2;\n      }\n    }\n    assert(ptrPos == len);\n    var str = allocateUnsafe(<u32>(bufPos >> 1));\n    memory.copy(changetype<usize>(str) + HEADER_SIZE, buf, bufPos);\n    memory.free(buf);\n    return str;\n  }\n\n  toUTF8(): usize {\n    var buf = memory.allocate(<usize>this.lengthUTF8);\n    var pos: usize = 0;\n    var end = <usize>this.length;\n    var off: usize = 0;\n    while (pos < end) {\n      let c1 = <u32>load<u16>(changetype<usize>(this) + (pos << 1), HEADER_SIZE);\n      if (c1 < 128) {\n        store<u8>(buf + off, c1);\n        ++off; ++pos;\n      } else if (c1 < 2048) {\n        let ptr = buf + off;\n        store<u8>(ptr, c1 >> 6      | 192);\n        store<u8>(ptr, c1      & 63 | 128, 1);\n        off += 2; ++pos;\n      } else {\n        let ptr = buf + off;\n        if ((c1 & 0xFC00) == 0xD800 && pos + 1 < end) {\n          let c2 = <u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1), HEADER_SIZE);\n          if ((c2 & 0xFC00) == 0xDC00) {\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n            store<u8>(ptr, c1 >> 18      | 240);\n            store<u8>(ptr, c1 >> 12 & 63 | 128, 1);\n            store<u8>(ptr, c1 >> 6  & 63 | 128, 2);\n            store<u8>(ptr, c1       & 63 | 128, 3);\n            off += 4; pos += 2;\n            continue;\n          }\n        }\n        store<u8>(ptr, c1 >> 12      | 224);\n        store<u8>(ptr, c1 >> 6  & 63 | 128, 1);\n        store<u8>(ptr, c1       & 63 | 128, 2);\n        off += 3; ++pos;\n      }\n    }\n    store<u8>(buf + off, 0);\n    return buf;\n  }\n}\n\nexport type string = String;\n\nexport function parseInt(str: String, radix: i32 = 0): f64 {\n  return parse<f64>(str, radix);\n}\n\nexport function parseI32(str: String, radix: i32 = 0): i32 {\n  return parse<i32>(str, radix);\n}\n\nexport function parseI64(str: String, radix: i32 = 0): i64 {\n  return parse<i64>(str, radix);\n}\n\n// FIXME: naive implementation\nexport function parseFloat(str: String): f64 {\n  var len: i32 = str.length;\n  if (!len) return NaN;\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <i32>load<u16>(ptr, HEADER_SIZE);\n\n  // determine sign\n  var sign: f64;\n  if (code == CharCode.MINUS) {\n    if (!--len) return NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = 1;\n  } else {\n    sign = 1;\n  }\n\n  // calculate value\n  var num: f64 = 0;\n  while (len--) {\n    code = <i32>load<u16>(ptr, HEADER_SIZE);\n    if (code == CharCode.DOT) {\n      ptr += 2;\n      let fac: f64 = 0.1; // precision :(\n      while (len--) {\n        code = <i32>load<u16>(ptr, HEADER_SIZE);\n        if (code == CharCode.E || code == CharCode.e) {\n          assert(false); // TODO\n        }\n        code -= CharCode._0;\n        if (<u32>code > 9) break;\n        num += <f64>code * fac;\n        fac *= 0.1;\n        ptr += 2;\n      }\n      break;\n    }\n    code -= CharCode._0;\n    if (<u32>code >= 10) break;\n    num = (num * 10) + code;\n    ptr += 2;\n  }\n  return sign * num;\n}\n","import \"allocator/arena\";\nexport { memory };\n\nimport { context, storage, near, ContractPromise } from \"./near\";\nimport { Cell, RGB, Point, TransferArgs, ContinueArgs } from \"./model.near\";\n\n// --- contract code goes below\n\nlet ERC20_CONTRACT: string = \"studio-tttvtybmc\";\n\nexport function setCoords(point: Point, value: RGB): void {\n  // load cell\n  let cell = getCell(point);\n  let sender = context.sender;\n\n  // pay\n  let args: TransferArgs = {tokens: cell.price, from: sender, to: cell.owner}\n  let promise = ContractPromise.create(ERC20_CONTRACT, \"transferFrom\", args.encode(), 1);\n\n  // update\n  cell.rgb = value;\n  cell.price *= 2;\n  cell.owner = sender;\n\n  // callback to do the update\n  let args2: ContinueArgs = {point: point, cell: cell}\n  promise = promise.then(\"continueSetCoords\", args2.encode(), 1);\n\n  promise.returnAsResult();\n}\n\n// needs to be exported to used as a callback\nexport function continueSetCoords(point: Point, cell: Cell): Cell {\n  // TODO have something really safe\n  // please near protocol, improve the contract promise API\n  // protect from external call\n  assert(context.sender == ERC20_CONTRACT, \"dont call this contract\")\n\n  let results = ContractPromise.getResults();\n\n  // verify everything was alright\n  for (let i=0; i<results.length; i++) {\n    assert(results[i].success, \"Transfer failed\");\n  }\n\n  storage.setBytes(format(point), cell.encode());\n  return cell;\n}\n\n// not used\nexport function getCoords(point: Point): Cell {\n  return getCell(point);\n}\n\nexport function getMap(): Cell[] {\n  let num_rows = 10;\n  let num_cols = 10;\n  let total_cells = num_rows * num_cols;\n  var arrResult:Cell[] = new Array(total_cells);\n  let i = 0;\n  for (let row=0; row<num_rows; row++) {\n    for (let col=0; col<num_cols; col++) {\n      arrResult[i] = getCell({x:row, y:col});\n      i++;\n    }\n  }\n  return arrResult;\n}\n\nfunction key(x: u32, y: u32): string {\n  return near.str(x) + \",\" + near.str(y)\n}\n\nfunction format(point: Point): string {\n  return near.str(point.x) + \",\" + near.str(point.y)\n}\n\nfunction getCell(point: Point): Cell {\n  let raw = storage.getBytes(format(point));\n  if(raw == null) {\n    return {\n      rgb: {\n        r:255,\n        g:255,\n        b:255,\n        },\n      owner: \"-\",\n      price: 1,\n    };\n  }\n  else {\n    let cell = Cell.decode(raw);\n    return cell;\n  }\n}","\n      import { storage, near } from \"./near\";\n      import { JSONEncoder } from \"./json/encoder\"\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState } from \"./json/decoder\"\n      import {setCoords as wrapped_setCoords, continueSetCoords as wrapped_continueSetCoords, getCoords as wrapped_getCoords, getMap as wrapped_getMap} from \"./main\";\n\n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_len: usize, value_ptr: usize): void;\n    \nimport {context as context,storage as storage,near as near,ContractPromise as ContractPromise} from \"./near\";\nimport {Cell as Cell,RGB as RGB,Point as Point,TransferArgs as TransferArgs,ContinueArgs as ContinueArgs} from \"./model.near\";\nimport { __near_decode_Point } from \"./model.near\";\nimport { __near_decode_RGB } from \"./model.near\";\nexport class __near_ArgsParser_setCoords extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_setCoords>;\n        handledRoot: boolean = false;\n      \n__near_param_point: Point;\n__near_param_value: RGB;\nsetNull(name: string): void {\nif (name == \"point\") {\n        this.__near_param_point = <Point>null;\n        return;\n      }\nif (name == \"value\") {\n        this.__near_param_value = <RGB>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\nif (name == \"point\") {\n          this.__near_param_point = <Point>__near_decode_Point(this.buffer, this.decoder.state);\n          return false;\n        }\nif (name == \"value\") {\n          this.__near_param_value = <RGB>__near_decode_RGB(this.buffer, this.decoder.state);\n          return false;\n        }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function setCoords(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_setCoords();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_setCoords>(handler);\n      handler.decoder.deserialize(json);\nwrapped_setCoords(\nhandler.__near_param_point,handler.__near_param_value\n);\n}\nimport { __near_decode_Cell } from \"./model.near\";\nexport class __near_ArgsParser_continueSetCoords extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_continueSetCoords>;\n        handledRoot: boolean = false;\n      \n__near_param_point: Point;\n__near_param_cell: Cell;\nsetNull(name: string): void {\nif (name == \"point\") {\n        this.__near_param_point = <Point>null;\n        return;\n      }\nif (name == \"cell\") {\n        this.__near_param_cell = <Cell>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\nif (name == \"point\") {\n          this.__near_param_point = <Point>__near_decode_Point(this.buffer, this.decoder.state);\n          return false;\n        }\nif (name == \"cell\") {\n          this.__near_param_cell = <Cell>__near_decode_Cell(this.buffer, this.decoder.state);\n          return false;\n        }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nimport { __near_encode_Cell } from \"./model.near\";\nexport function continueSetCoords(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_continueSetCoords();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_continueSetCoords>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_continueSetCoords(\nhandler.__near_param_point,handler.__near_param_cell\n);\n\n        let encoder = new JSONEncoder();\n      \nif (result != null) {\n          encoder.pushObject(null);\n          __near_encode_Cell(<Cell>result, encoder);\n          encoder.popObject();\n        } else {\n          encoder.setNull(null);\n        }\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, val.buffer.data);\n      \n}\nexport class __near_ArgsParser_getCoords extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_getCoords>;\n        handledRoot: boolean = false;\n      \n__near_param_point: Point;\nsetNull(name: string): void {\nif (name == \"point\") {\n        this.__near_param_point = <Point>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\nif (name == \"point\") {\n          this.__near_param_point = <Point>__near_decode_Point(this.buffer, this.decoder.state);\n          return false;\n        }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function getCoords(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_getCoords();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_getCoords>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_getCoords(\nhandler.__near_param_point\n);\n\n        let encoder = new JSONEncoder();\n      \nif (result != null) {\n          encoder.pushObject(null);\n          __near_encode_Cell(<Cell>result, encoder);\n          encoder.popObject();\n        } else {\n          encoder.setNull(null);\n        }\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, val.buffer.data);\n      \n}\nexport class __near_ArgsParser_getMap extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_getMap>;\n        handledRoot: boolean = false;\n      \nsetNull(name: string): void {\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function __near_encode_Array_Cell(\n          value: Array<Cell>,\n          encoder: JSONEncoder): void {\nfor (let i = 0; i < value.length; i++) {\nif (value[i] != null) {\n          encoder.pushObject(null);\n          __near_encode_Cell(<Cell>value[i], encoder);\n          encoder.popObject();\n        } else {\n          encoder.setNull(null);\n        }\n}\n}\nexport function getMap(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_getMap();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_getMap>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_getMap(\n\n);\n\n        let encoder = new JSONEncoder();\n      \nif (result != null) {\n          encoder.pushArray(null);\n          __near_encode_Array_Cell(<Array<Cell>>result, encoder);\n          encoder.popArray();\n        } else {\n          encoder.setNull(null);\n        }\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, val.buffer.data);\n      \n}","import {\n  itoa,\n  dtoa\n} from \"./internal/number\";\n\nimport {\n  isNaN as builtin_isNaN,\n  isFinite as builtin_isFinite\n} from \"./builtins\";\n\n@sealed\nexport abstract class I8 {\n\n  @lazy static readonly MIN_VALUE: i8 = i8.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: i8 = i8.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i8 {\n    return <i8>parseI32(value, radix);\n  }\n\n  toString(this: i8): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class I16 {\n\n  @lazy static readonly MIN_VALUE: i16 = i16.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: i16 = i16.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i16 {\n    return <i16>parseI32(value, radix);\n  }\n\n  toString(this: i16): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class I32 {\n\n  @lazy static readonly MIN_VALUE: i32 = i32.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: i32 = i32.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i32 {\n    return <i32>parseI32(value, radix);\n  }\n\n  toString(this: i32): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class I64 {\n\n  @lazy static readonly MIN_VALUE: i64 = i64.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: i64 = i64.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i64 {\n    return <i64>parseI64(value, radix);\n  }\n\n  toString(this: i64): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class Isize {\n\n  @lazy static readonly MIN_VALUE: isize = isize.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: isize = isize.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): isize {\n    return <isize>parseI64(value, radix);\n  }\n\n  toString(this: isize): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class U8 {\n\n  @lazy static readonly MIN_VALUE: u8 = u8.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: u8 = u8.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u8 {\n    return <u8>parseI32(value, radix);\n  }\n\n  toString(this: u8): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class U16 {\n\n  @lazy static readonly MIN_VALUE: u16 = u16.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: u16 = u16.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u16 {\n    return <u16>parseI32(value, radix);\n  }\n\n  toString(this: u16): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class U32 {\n\n  @lazy static readonly MIN_VALUE: u32 = u32.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: u32 = u32.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u32 {\n    return <u32>parseI32(value, radix);\n  }\n\n  toString(this: u32): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class U64 {\n\n  @lazy static readonly MIN_VALUE: u64 = u64.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: u64 = u64.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u64 {\n    return <u64>parseI64(value, radix);\n  }\n\n  toString(this: u64): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class Usize {\n\n  @lazy static readonly MIN_VALUE: usize = usize.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: usize = usize.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): usize {\n    return <usize>parseI64(value, radix);\n  }\n\n  toString(this: usize): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed\nexport abstract class Bool {\n\n  @lazy static readonly MIN_VALUE: bool = bool.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: bool = bool.MAX_VALUE;\n\n  toString(this: bool): String {\n    // TODO: radix?\n    return this ? \"true\" : \"false\";\n  }\n}\n\nexport { Bool as Boolean };\n\n@sealed\nexport abstract class F32 {\n\n  @lazy static readonly EPSILON: f32 = f32.EPSILON;\n  @lazy static readonly MIN_VALUE: f32 = f32.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: f32 = f32.MAX_VALUE;\n  @lazy static readonly MIN_SAFE_INTEGER: f32 = f32.MIN_SAFE_INTEGER;\n  @lazy static readonly MAX_SAFE_INTEGER: f32 = f32.MAX_SAFE_INTEGER;\n  @lazy static readonly POSITIVE_INFINITY: f32 = Infinity;\n  @lazy static readonly NEGATIVE_INFINITY: f32 = -Infinity;\n  @lazy static readonly NaN: f32 = NaN;\n\n  static isNaN(value: f32): bool {\n    return isNaN<f32>(value);\n  }\n\n  static isFinite(value: f32): bool {\n    return isFinite<f32>(value);\n  }\n\n  static isSafeInteger(value: f32): bool {\n    return abs<f32>(value) <= f32.MAX_SAFE_INTEGER && trunc<f32>(value) == value;\n  }\n\n  static isInteger(value: f32): bool {\n    return isFinite<f32>(value) && trunc<f32>(value) == value;\n  }\n\n  static parseInt(value: string, radix: i32 = 0): f32 {\n    return <f32>parseI64(value, radix);\n  }\n\n  static parseFloat(value: string): f32 {\n    return <f32>parseFloat(value);\n  }\n\n  toString(this: f32): String {\n    // TODO: radix\n    return dtoa(this);\n  }\n}\n\n@sealed\nexport abstract class F64 {\n\n  @lazy static readonly EPSILON: f64 = f64.EPSILON;\n  @lazy static readonly MIN_VALUE: f64 = f64.MIN_VALUE;\n  @lazy static readonly MAX_VALUE: f64 = f64.MAX_VALUE;\n  @lazy static readonly MIN_SAFE_INTEGER: f64 = f64.MIN_SAFE_INTEGER;\n  @lazy static readonly MAX_SAFE_INTEGER: f64 = f64.MAX_SAFE_INTEGER;\n  @lazy static readonly POSITIVE_INFINITY: f64 = Infinity;\n  @lazy static readonly NEGATIVE_INFINITY: f64 = -Infinity;\n  @lazy static readonly NaN: f64 = NaN;\n\n  static isNaN(value: f64): bool {\n    return builtin_isNaN<f64>(value);\n  }\n\n  static isFinite(value: f64): bool {\n    return builtin_isFinite<f64>(value);\n  }\n\n  static isSafeInteger(value: f64): bool {\n    return abs<f64>(value) <= f64.MAX_SAFE_INTEGER && trunc<f64>(value) == value;\n  }\n\n  static isInteger(value: f64): bool {\n    return builtin_isFinite<f64>(value) && trunc<f64>(value) == value;\n  }\n\n  static parseInt(value: string, radix: i32 = 0): f64 {\n    return <f64>parseI64(value, radix);\n  }\n\n  static parseFloat(value: string): f64 {\n    return parseFloat(value);\n  }\n\n  toString(this: f64): String {\n    // TODO: radix\n    return dtoa(this);\n  }\n}\n\nexport { F64 as Number };\n","import {\n  CharCode,\n  allocateUnsafe as allocateUnsafeString,\n  freeUnsafe as freeUnsafeString,\n  HEADER_SIZE as STRING_HEADER_SIZE\n} from \"./string\";\n\nimport {\n  LOAD\n} from \"./arraybuffer\";\n\n@inline export const MAX_DOUBLE_LENGTH = 28;\n\n@lazy @inline const POWERS10: u32[] = [\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n  1000000000\n];\n\n/*\n  Lookup table for pairwise char codes in range [0-99]\n\n  \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\",\n  \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\n  \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\",\n  \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\",\n  \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\",\n  \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n  \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\",\n  \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",\n  \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\",\n  \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\n*/\n@lazy @inline const DIGITS: u32[] = [\n  0x00300030, 0x00310030, 0x00320030, 0x00330030, 0x00340030,\n  0x00350030, 0x00360030, 0x00370030, 0x00380030, 0x00390030,\n  0x00300031, 0x00310031, 0x00320031, 0x00330031, 0x00340031,\n  0x00350031, 0x00360031, 0x00370031, 0x00380031, 0x00390031,\n  0x00300032, 0x00310032, 0x00320032, 0x00330032, 0x00340032,\n  0x00350032, 0x00360032, 0x00370032, 0x00380032, 0x00390032,\n  0x00300033, 0x00310033, 0x00320033, 0x00330033, 0x00340033,\n  0x00350033, 0x00360033, 0x00370033, 0x00380033, 0x00390033,\n  0x00300034, 0x00310034, 0x00320034, 0x00330034, 0x00340034,\n  0x00350034, 0x00360034, 0x00370034, 0x00380034, 0x00390034,\n  0x00300035, 0x00310035, 0x00320035, 0x00330035, 0x00340035,\n  0x00350035, 0x00360035, 0x00370035, 0x00380035, 0x00390035,\n  0x00300036, 0x00310036, 0x00320036, 0x00330036, 0x00340036,\n  0x00350036, 0x00360036, 0x00370036, 0x00380036, 0x00390036,\n  0x00300037, 0x00310037, 0x00320037, 0x00330037, 0x00340037,\n  0x00350037, 0x00360037, 0x00370037, 0x00380037, 0x00390037,\n  0x00300038, 0x00310038, 0x00320038, 0x00330038, 0x00340038,\n  0x00350038, 0x00360038, 0x00370038, 0x00380038, 0x00390038,\n  0x00300039, 0x00310039, 0x00320039, 0x00330039, 0x00340039,\n  0x00350039, 0x00360039, 0x00370039, 0x00380039, 0x00390039\n];\n\n@lazy @inline const EXP_POWERS: i16[] = [\n  -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007,  -980,\n   -954,  -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,\n   -688,  -661,  -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,\n   -422,  -396,  -369,  -343,  -316,  -289,  -263,  -236,  -210,  -183,\n   -157,  -130,  -103,   -77,   -50,   -24,     3,    30,    56,    83,\n    109,   136,   162,   189,   216,   242,   269,   295,   322,   348,\n    375,   402,   428,   455,   481,   508,   534,   561,   588,   614,\n    641,   667,   694,   720,   747,   774,   800,   827,   853,   880,\n    907,   933,   960,   986,  1013,  1039,  1066\n];\n\n// 1e-348, 1e-340, ..., 1e340\n@lazy @inline const FRC_POWERS: u64[] = [\n  0xFA8FD5A0081C0288, 0xBAAEE17FA23EBF76, 0x8B16FB203055AC76, 0xCF42894A5DCE35EA,\n  0x9A6BB0AA55653B2D, 0xE61ACF033D1A45DF, 0xAB70FE17C79AC6CA, 0xFF77B1FCBEBCDC4F,\n  0xBE5691EF416BD60C, 0x8DD01FAD907FFC3C, 0xD3515C2831559A83, 0x9D71AC8FADA6C9B5,\n  0xEA9C227723EE8BCB, 0xAECC49914078536D, 0x823C12795DB6CE57, 0xC21094364DFB5637,\n  0x9096EA6F3848984F, 0xD77485CB25823AC7, 0xA086CFCD97BF97F4, 0xEF340A98172AACE5,\n  0xB23867FB2A35B28E, 0x84C8D4DFD2C63F3B, 0xC5DD44271AD3CDBA, 0x936B9FCEBB25C996,\n  0xDBAC6C247D62A584, 0xA3AB66580D5FDAF6, 0xF3E2F893DEC3F126, 0xB5B5ADA8AAFF80B8,\n  0x87625F056C7C4A8B, 0xC9BCFF6034C13053, 0x964E858C91BA2655, 0xDFF9772470297EBD,\n  0xA6DFBD9FB8E5B88F, 0xF8A95FCF88747D94, 0xB94470938FA89BCF, 0x8A08F0F8BF0F156B,\n  0xCDB02555653131B6, 0x993FE2C6D07B7FAC, 0xE45C10C42A2B3B06, 0xAA242499697392D3,\n  0xFD87B5F28300CA0E, 0xBCE5086492111AEB, 0x8CBCCC096F5088CC, 0xD1B71758E219652C,\n  0x9C40000000000000, 0xE8D4A51000000000, 0xAD78EBC5AC620000, 0x813F3978F8940984,\n  0xC097CE7BC90715B3, 0x8F7E32CE7BEA5C70, 0xD5D238A4ABE98068, 0x9F4F2726179A2245,\n  0xED63A231D4C4FB27, 0xB0DE65388CC8ADA8, 0x83C7088E1AAB65DB, 0xC45D1DF942711D9A,\n  0x924D692CA61BE758, 0xDA01EE641A708DEA, 0xA26DA3999AEF774A, 0xF209787BB47D6B85,\n  0xB454E4A179DD1877, 0x865B86925B9BC5C2, 0xC83553C5C8965D3D, 0x952AB45CFA97A0B3,\n  0xDE469FBD99A05FE3, 0xA59BC234DB398C25, 0xF6C69A72A3989F5C, 0xB7DCBF5354E9BECE,\n  0x88FCF317F22241E2, 0xCC20CE9BD35C78A5, 0x98165AF37B2153DF, 0xE2A0B5DC971F303A,\n  0xA8D9D1535CE3B396, 0xFB9B7CD9A4A7443C, 0xBB764C4CA7A44410, 0x8BAB8EEFB6409C1A,\n  0xD01FEF10A657842C, 0x9B10A4E5E9913129, 0xE7109BFBA19C0C9D, 0xAC2820D9623BF429,\n  0x80444B5E7AA7CF85, 0xBF21E44003ACDD2D, 0x8E679C2F5E44FF8F, 0xD433179D9C8CB841,\n  0x9E19DB92B4E31BA9, 0xEB96BF6EBADF77D9, 0xAF87023B9BF0EE6B\n];\n\n// Count number of decimals for u32 values\n// In our case input value always non-zero so we can simplify some parts\nexport function decimalCount32(value: u32): u32 {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    let l: u32 = 32 - clz<u32>(value); // log2\n    let t = l * 1233 >>> 12; // log10\n\n    let lutbuf = <ArrayBuffer>POWERS10.buffer_;\n    let power  = LOAD<u32>(lutbuf, t);\n    t -= <u32>(value < power);\n    return t + 1;\n  } else {\n    if (value < 100000) {\n      if (value < 100) {\n        return select<u32>(1, 2, value < 10);\n      } else {\n        let m = select<u32>(4, 5, value < 10000);\n        return select<u32>(3, m, value < 1000);\n      }\n    } else {\n      if (value < 10000000) {\n        return select<u32>(6, 7, value < 1000000);\n      } else {\n        let m = select<u32>(9, 10, value < 1000000000);\n        return select<u32>(8, m, value < 100000000);\n      }\n    }\n  }\n}\n\n// Count number of decimals for u64 values\n// In our case input value always greater than 2^32-1 so we can skip some parts\nexport function decimalCount64(value: u64): u32 {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    let l: u32 = 64 - <u32>clz<u64>(value); // log2\n    let t = l * 1233 >>> 12; // log10\n\n    let lutbuf = <ArrayBuffer>POWERS10.buffer_;\n    let power  = LOAD<u32,u64>(lutbuf, t - 10);\n    t -= <u32>(value < 10000000000 * power);\n    return t + 1;\n  } else {\n    if (value < 1000000000000000) {\n      if (value < 1000000000000) {\n        return select<u32>(11, 12, value < 100000000000);\n      } else {\n        let m = select<u32>(14, 15, value < 100000000000000);\n        return select<u32>(13, m, value < 10000000000000);\n      }\n    } else {\n      if (value < 100000000000000000) {\n        return select<u32>(16, 17, value < 10000000000000000);\n      } else {\n        let m = select<u32>(19, 20, value < 10000000000000000000);\n        return select<u32>(18, m, value < 1000000000000000000);\n      }\n    }\n  }\n}\n\nfunction utoa32_lut(buffer: usize, num: u32, offset: usize): void {\n  var lutbuf = <ArrayBuffer>DIGITS.buffer_;\n\n  while (num >= 10000) {\n    // in most VMs i32/u32 div and modulo by constant can be shared and simplificate\n    let t = num / 10000;\n    let r = num % 10000;\n    num = t;\n\n    let d1 = r / 100;\n    let d2 = r % 100;\n\n    let digits1 = LOAD<u32,u64>(lutbuf, d1);\n    let digits2 = LOAD<u32,u64>(lutbuf, d2);\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32), STRING_HEADER_SIZE);\n  }\n\n  if (num >= 100) {\n    let t  = num / 100;\n    let d1 = num % 100;\n    num = t;\n    offset -= 2;\n    let digits = LOAD<u32>(lutbuf, d1);\n    store<u32>(buffer + (offset << 1), digits, STRING_HEADER_SIZE);\n  }\n\n  if (num >= 10) {\n    offset -= 2;\n    let digits = LOAD<u32>(lutbuf, num);\n    store<u32>(buffer + (offset << 1), digits, STRING_HEADER_SIZE);\n  } else {\n    offset -= 1;\n    let digit = CharCode._0 + num;\n    store<u16>(buffer + (offset << 1), digit, STRING_HEADER_SIZE);\n  }\n}\n\nfunction utoa64_lut(buffer: usize, num: u64, offset: usize): void {\n  var lutbuf = <ArrayBuffer>DIGITS.buffer_;\n\n  while (num >= 100000000) {\n    let t = num / 100000000;\n    let r = <usize>(num - t * 100000000);\n    num = t;\n\n    let b = r / 10000;\n    let c = r % 10000;\n\n    let b1 = b / 100;\n    let b2 = b % 100;\n    let c1 = c / 100;\n    let c2 = c % 100;\n\n    let digits1 = LOAD<u32,u64>(lutbuf, c1);\n    let digits2 = LOAD<u32,u64>(lutbuf, c2);\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32), STRING_HEADER_SIZE);\n\n    digits1 = LOAD<u32,u64>(lutbuf, b1);\n    digits2 = LOAD<u32,u64>(lutbuf, b2);\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32), STRING_HEADER_SIZE);\n  }\n\n  utoa32_lut(buffer, <u32>num, offset);\n}\n\nfunction utoa_simple<T>(buffer: usize, num: T, offset: usize): void {\n  do {\n    let t = num / 10;\n    let r = <u32>(num % 10);\n    num = t;\n    offset -= 1;\n    store<u16>(buffer + (offset << 1), CharCode._0 + r, STRING_HEADER_SIZE);\n  } while (num);\n}\n\n@inline\nexport function utoa32_core(buffer: usize, num: u32, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa32_lut(buffer, num, offset);\n  }\n}\n\n@inline\nexport function utoa64_core(buffer: usize, num: u64, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa64_lut(buffer, num, offset);\n  }\n}\n\nexport function utoa32(value: u32): String {\n  if (!value) return \"0\";\n\n  var decimals = decimalCount32(value);\n  var buffer   = allocateUnsafeString(decimals);\n\n  utoa32_core(changetype<usize>(buffer), value, decimals);\n  return buffer;\n}\n\nexport function itoa32(value: i32): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var decimals = decimalCount32(value) + <u32>sign;\n  var buffer   = allocateUnsafeString(decimals);\n\n  utoa32_core(changetype<usize>(buffer), value, decimals);\n  if (sign) store<u16>(changetype<usize>(buffer), CharCode.MINUS, STRING_HEADER_SIZE);\n\n  return buffer;\n}\n\nexport function utoa64(value: u64): String {\n  if (!value) return \"0\";\n\n  var buffer: String;\n  if (value <= u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32);\n    buffer = allocateUnsafeString(decimals);\n    utoa32_core(changetype<usize>(buffer), val32, decimals);\n  } else {\n    let decimals = decimalCount64(value);\n    buffer = allocateUnsafeString(decimals);\n    utoa64_core(changetype<usize>(buffer), value, decimals);\n  }\n  return buffer;\n}\n\nexport function itoa64(value: i64): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var buffer: String;\n  if (<u64>value <= <u64>u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32) + <u32>sign;\n    buffer = allocateUnsafeString(decimals);\n    utoa32_core(changetype<usize>(buffer), val32, decimals);\n  } else {\n    let decimals = decimalCount64(value) + <u32>sign;\n    buffer = allocateUnsafeString(decimals);\n    utoa64_core(changetype<usize>(buffer), value, decimals);\n  }\n  if (sign) store<u16>(changetype<usize>(buffer), CharCode.MINUS, STRING_HEADER_SIZE);\n\n  return buffer;\n}\n\nexport function itoa<T>(value: T): String {\n  if (!isInteger<T>()) {\n    assert(false); // unexpecteble non-integer generic type\n  } else {\n    if (isSigned<T>()) {\n      if (sizeof<T>() <= 4) {\n        return itoa32(<i32>value);\n      } else {\n        return itoa64(<i64>value);\n      }\n    } else {\n      if (sizeof<T>() <= 4) {\n        return utoa32(<u32>value);\n      } else {\n        return utoa64(<u64>value);\n      }\n    }\n  }\n}\n\n@lazy var _K: i32 = 0;\n// @lazy var _frc: u64 = 0;\n@lazy var _exp: i32 = 0;\n@lazy var _frc_minus: u64 = 0;\n@lazy var _frc_plus:  u64 = 0;\n@lazy var _frc_pow: u64 = 0;\n@lazy var _exp_pow: i32 = 0;\n\n@inline\nfunction umul64f(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  w += 0x7FFFFFFF; // rounding\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n@inline\nfunction umul64e(e1: i32, e2: i32): i32 {\n  return e1 + e2 + 64; // where 64 is significand size\n}\n\n@inline\nfunction normalizedBoundaries(f: u64, e: i32): void {\n  var frc = (f << 1) + 1;\n  var exp = e - 1;\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var m = 1 + <i32>(f == 0x0010000000000000);\n\n  _frc_plus  = frc;\n  _frc_minus = ((f << m) - 1) << e - m - exp;\n  _exp = exp;\n}\n\n@inline\nfunction grisuRound(buffer: usize, len: i32, delta: u64, rest: u64, ten_kappa: u64, wp_w: u64): void {\n  var lastp = buffer + ((len - 1) << 1);\n  var digit = load<u16>(lastp, STRING_HEADER_SIZE);\n  while (\n    rest < wp_w &&\n    delta - rest >= ten_kappa && (\n      rest + ten_kappa < wp_w ||\n      wp_w - rest > rest + ten_kappa - wp_w\n    )\n  ) {\n    --digit;\n    rest += ten_kappa;\n  }\n  store<u16>(lastp, digit, STRING_HEADER_SIZE);\n}\n\n@inline\nfunction getCachedPower(minExp: i32): void {\n  const c = reinterpret<f64>(0x3FD34413509F79FE); // 1 / lg(10) = 0.30102999566398114\n  var dk = (-61 - minExp) * c + 347;\t            // dk must be positive, so can do ceiling in positive\n  var k = <i32>dk;\n      k += <i32>(k != dk); // conversion with ceil\n\n  var index = (k >> 3) + 1;\n  _K = 348 - (index << 3);\t// decimal exponent no need lookup table\n  var frcPowers = <ArrayBuffer>FRC_POWERS.buffer_;\n  var expPowers = <ArrayBuffer>EXP_POWERS.buffer_;\n  _frc_pow = LOAD<u64>(frcPowers, index);\n  _exp_pow = LOAD<i16,i32>(expPowers, index);\n}\n\n@inline\nfunction grisu2(value: f64, buffer: usize, sign: i32): i32 {\n\n  // frexp routine\n  var uv  = reinterpret<u64>(value);\n  var exp = <i32>((uv & 0x7FF0000000000000) >>> 52);\n  var sid = uv & 0x000FFFFFFFFFFFFF;\n  var frc = (<u64>(exp != 0) << 52) + sid;\n      exp = select<i32>(exp, 1, exp != 0) - (0x3FF + 52);\n\n  normalizedBoundaries(frc, exp);\n  getCachedPower(_exp);\n\n  // normalize\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var frc_pow = _frc_pow;\n  var exp_pow = _exp_pow;\n\n  var w_frc = umul64f(frc, frc_pow);\n  var w_exp = umul64e(exp, exp_pow);\n\n  var wp_frc = umul64f(_frc_plus, frc_pow) - 1;\n  var wp_exp = umul64e(_exp,      exp_pow);\n\n  var wm_frc = umul64f(_frc_minus, frc_pow) + 1;\n  var delta  = wp_frc - wm_frc;\n\n  return genDigits(buffer, w_frc, w_exp, wp_frc, wp_exp, delta, sign);\n}\n\nfunction genDigits(buffer: usize, w_frc: u64, w_exp: i32, mp_frc: u64, mp_exp: i32, delta: u64, sign: i32): i32 {\n  var one_exp = -mp_exp;\n  var one_frc = (<u64>1) << one_exp;\n  var mask    = one_frc - 1;\n\n  var wp_w_frc = mp_frc - w_frc;\n  var wp_w_exp = mp_exp;\n\n  var p1 = <u32>(mp_frc >> one_exp);\n  var p2 = mp_frc & mask;\n\n  var kappa = <i32>decimalCount32(p1);\n  var len = sign;\n\n  var powers10 = <ArrayBuffer>POWERS10.buffer_;\n\n  while (kappa > 0) {\n    let d: u32;\n    switch (kappa) {\n      case 10: { d = p1 / 1000000000; p1 %= 1000000000; break; }\n      case  9: { d = p1 /  100000000; p1 %=  100000000; break; }\n      case  8: { d = p1 /   10000000; p1 %=   10000000; break; }\n      case  7: { d = p1 /    1000000; p1 %=    1000000; break; }\n      case  6: { d = p1 /     100000; p1 %=     100000; break; }\n      case  5: { d = p1 /      10000; p1 %=      10000; break; }\n      case  4: { d = p1 /       1000; p1 %=       1000; break; }\n      case  3: { d = p1 /        100; p1 %=        100; break; }\n      case  2: { d = p1 /         10; p1 %=         10; break; }\n      case  1: { d = p1;              p1 =           0; break; }\n      default: { d = 0; break; }\n    }\n\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d, STRING_HEADER_SIZE);\n\n    --kappa;\n    let tmp = ((<u64>p1) << one_exp) + p2;\n    if (tmp <= delta) {\n      _K += kappa;\n      grisuRound(buffer, len, delta, tmp, LOAD<u32,u64>(powers10, kappa) << one_exp, wp_w_frc);\n      return len;\n    }\n  }\n\n  while (1) {\n    p2    *= 10;\n    delta *= 10;\n\n    let d = p2 >> one_exp;\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d, STRING_HEADER_SIZE);\n\n    p2 &= mask;\n    --kappa;\n    if (p2 < delta) {\n      _K += kappa;\n      wp_w_frc *= LOAD<u32,u64>(powers10, -kappa);\n      grisuRound(buffer, len, delta, p2, one_frc, wp_w_frc);\n      return len;\n    }\n  }\n\n  return len;\n}\n\n@inline\nfunction genExponent(buffer: usize, k: i32): i32 {\n  var sign = k < 0;\n  if (sign) k = -k;\n  var decimals = decimalCount32(k) + 1;\n  utoa32_core(buffer, k, decimals);\n  store<u16>(buffer, <u16>select<u32>(CharCode.MINUS, CharCode.PLUS, sign), STRING_HEADER_SIZE);\n  return decimals;\n}\n\nfunction prettify(buffer: usize, length: i32, k: i32): i32 {\n  if (!k) {\n    store<u32>(buffer + (length << 1), CharCode.DOT | (CharCode._0 << 16), STRING_HEADER_SIZE);\n    return length + 2;\n  }\n\n  var kk = length + k;\n  if (length <= kk && kk <= 21) {\n    // 1234e7 -> 12340000000\n    for (let i = length; i < kk; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0, STRING_HEADER_SIZE);\n    }\n    store<u32>(buffer + (kk << 1), CharCode.DOT | (CharCode._0 << 16), STRING_HEADER_SIZE);\n    return kk + 2;\n  } else if (kk > 0 && kk <= 21) {\n    // 1234e-2 -> 12.34\n    let ptr = buffer + (kk << 1);\n    memory.copy(\n      ptr + STRING_HEADER_SIZE + 2,\n      ptr + STRING_HEADER_SIZE,\n      -k << 1\n    );\n    store<u16>(buffer + (kk << 1), CharCode.DOT, STRING_HEADER_SIZE);\n    return length + 1;\n  } else if (-6 < kk && kk <= 0) {\n    // 1234e-6 -> 0.001234\n    let offset = 2 - kk;\n    memory.copy(\n      buffer + STRING_HEADER_SIZE + (offset << 1),\n      buffer + STRING_HEADER_SIZE,\n      length << 1\n    );\n    store<u32>(buffer, CharCode._0 | (CharCode.DOT << 16), STRING_HEADER_SIZE);\n    for (let i = 2; i < offset; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0, STRING_HEADER_SIZE);\n    }\n    return length + offset;\n  } else if (length == 1) {\n    // 1e30\n    store<u16>(buffer, CharCode.e, STRING_HEADER_SIZE + 2);\n    length = genExponent(buffer + 4, kk - 1);\n    return length + 2;\n  } else {\n    let len = length << 1;\n    memory.copy(\n      buffer + STRING_HEADER_SIZE + 4,\n      buffer + STRING_HEADER_SIZE + 2,\n      len - 2\n    );\n    store<u16>(buffer,       CharCode.DOT, STRING_HEADER_SIZE + 2);\n    store<u16>(buffer + len, CharCode.e,   STRING_HEADER_SIZE + 2);\n    length += genExponent(buffer + len + 4, kk - 1);\n    return length + 2;\n  }\n}\n\nexport function dtoa_core(buffer: usize, value: f64): i32 {\n  var sign = <i32>(value < 0);\n  if (sign) {\n    value = -value;\n    store<u16>(buffer, CharCode.MINUS, STRING_HEADER_SIZE);\n  }\n  // assert(value > 0 && value <= 1.7976931348623157e308);\n  var len = grisu2(value, buffer, sign);\n      len = prettify(buffer + (sign << 1), len - sign, _K);\n  return len + sign;\n}\n\nexport function dtoa(value: f64): String {\n  if (value == 0) return \"0.0\";\n  if (!isFinite(value)) {\n    if (isNaN(value)) return \"NaN\";\n    return select<String>(\"-Infinity\", \"Infinity\", value < 0);\n  }\n  var buffer = allocateUnsafeString(MAX_DOUBLE_LENGTH);\n  var length = dtoa_core(changetype<usize>(buffer), value);\n  var result = buffer.substring(0, length);\n  freeUnsafeString(buffer);\n  return result;\n}\n\nexport function itoa_stream<T>(buffer: usize, offset: usize, value: T): u32 {\n  buffer += (offset << 1);\n  if (!value) {\n    store<u16>(buffer, CharCode._0, STRING_HEADER_SIZE);\n    return 1;\n  }\n  var decimals: u32 = 0;\n  if (isSigned<T>()) {\n    let sign = value < 0;\n    if (sign) value = -value;\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value) + <u32>sign;\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32) + <u32>sign;\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value) + <u32>sign;\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n    if (sign) store<u16>(buffer, CharCode.MINUS, STRING_HEADER_SIZE);\n  } else {\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value);\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32);\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value);\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n  }\n  return decimals;\n}\n\nexport function dtoa_stream(buffer: usize, offset: usize, value: f64): u32 {\n  buffer += (offset << 1);\n  if (value == 0.0) {\n    store<u16>(buffer, CharCode._0,  STRING_HEADER_SIZE + 0);\n    store<u16>(buffer, CharCode.DOT, STRING_HEADER_SIZE + 2);\n    store<u16>(buffer, CharCode._0,  STRING_HEADER_SIZE + 4);\n    return 3;\n  }\n  if (!isFinite(value)) {\n    if (isNaN(value)) {\n      store<u16>(buffer, CharCode.N, STRING_HEADER_SIZE + 0);\n      store<u16>(buffer, CharCode.a, STRING_HEADER_SIZE + 2);\n      store<u16>(buffer, CharCode.N, STRING_HEADER_SIZE + 4);\n      return 3;\n    } else {\n      let sign = <i32>(value < 0);\n      let len  = 8 + sign;\n      let source = changetype<usize>(select<String>(\"-Infinity\", \"Infinity\", sign));\n      memory.copy(buffer + STRING_HEADER_SIZE, source + STRING_HEADER_SIZE, len << 1);\n      return len;\n    }\n  }\n  return dtoa_core(buffer, value);\n}\n","/* tslint:disable */\n\n@builtin @inline export const NaN: f64 = 0 / 0;\n@builtin @inline export const Infinity: f64 = 1 / 0;\n\n@builtin export declare function isInteger<T>(value?: T): bool;\n@builtin export declare function isFloat<T>(value?: T): bool;\n@builtin export declare function isSigned<T>(value?: T): bool;\n@builtin export declare function isReference<T>(value?: T): bool;\n@builtin export declare function isString<T>(value?: T): bool;\n@builtin export declare function isArray<T>(value?: T): bool;\n@builtin export declare function isArrayLike<T>(value?: T): bool;\n@builtin export declare function isFunction<T>(value?: T): bool;\n@builtin export declare function isNullable<T>(value?: T): bool;\n@builtin export declare function isDefined(expression: void): bool;\n@builtin export declare function isConstant(expression: void): bool;\n@builtin export declare function isManaged<T>(value?: T): bool;\n@inline export function isNaN<T>(value: T): bool { return value != value; }\n@inline export function isFinite<T>(value: T): bool { return value - value == 0; }\n\n@builtin export declare function clz<T>(value: T): T;\n@builtin export declare function ctz<T>(value: T): T;\n@builtin export declare function popcnt<T>(value: T): T;\n@builtin export declare function rotl<T>(value: T, shift: T): T;\n@builtin export declare function rotr<T>(value: T, shift: T): T;\n@builtin export declare function abs<T>(value: T): T;\n@builtin export declare function max<T>(left: T, right: T): T;\n@builtin export declare function min<T>(left: T, right: T): T;\n@builtin export declare function ceil<T>(value: T): T;\n@builtin export declare function floor<T>(value: T): T;\n@builtin export declare function copysign<T>(left: T, right: T): T;\n@builtin export declare function nearest<T>(value: T): T;\n@builtin export declare function reinterpret<T>(value: void): T;\n@builtin export declare function sqrt<T>(value: T): T;\n@builtin export declare function trunc<T>(value: T): T;\n@builtin export declare function load<T>(offset: usize, immOffset?: usize, immAlign?: usize): T;\n@builtin export declare function store<T>(offset: usize, value: void, immOffset?: usize, immAlign?: usize): void;\n@builtin export declare function sizeof<T>(): usize; // | u32 / u64\n@builtin export declare function alignof<T>(): usize; // | u32 / u64\n@builtin export declare function offsetof<T>(fieldName?: string): usize; // | u32 / u64\n@builtin export declare function select<T>(ifTrue: T, ifFalse: T, condition: bool): T;\n@builtin export declare function unreachable(): void;\n@builtin export declare function changetype<T>(value: void): T;\n@builtin export declare function assert<T>(isTrueish: T, message?: string): T;\n@builtin export declare function unchecked<T>(expr: T): T;\n@builtin export declare function call_indirect<T>(target: void, ...args: void[]): T;\n@builtin export declare function instantiate<T>(...args: void[]): T;\n\nexport namespace atomic {\n  @builtin export declare function load<T>(offset: usize, immOffset?: usize): T;\n  @builtin export declare function store<T>(offset: usize, value: T, immOffset?: usize): void;\n  @builtin export declare function add<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function sub<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function and<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function or<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function xor<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function xchg<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function cmpxchg<T>(ptr: usize, expected: T, replacement: T, immOffset?: usize): T;\n  @builtin export declare function wait<T>(ptr: usize, expected: T, timeout: i64): AtomicWaitResult;\n  @builtin export declare function notify<T>(ptr: usize, count: u32): u32;\n}\n\n@lazy export const enum AtomicWaitResult {\n  OK = 0,\n  NOT_EQUAL = 1,\n  TIMED_OUT = 2\n}\n\n@builtin export declare function i8(value: void): i8;\nexport namespace i8 {\n  @lazy export const MIN_VALUE: i8 = -128;\n  @lazy export const MAX_VALUE: i8 =  127;\n}\n\n@builtin export declare function i16(value: void): i16;\nexport namespace i16 {\n  @lazy export const MIN_VALUE: i16 = -32768;\n  @lazy export const MAX_VALUE: i16 =  32767;\n}\n\n@builtin export declare function i32(value: void): i32;\nexport namespace i32 {\n  @lazy export const MIN_VALUE: i32 = -2147483648;\n  @lazy export const MAX_VALUE: i32 =  2147483647;\n  @builtin export declare function clz(value: i32): i32;\n  @builtin export declare function ctz(value: i32): i32;\n  @builtin export declare function popcnt(value: i32): i32;\n  @builtin export declare function rotl(value: i32, shift: i32): i32;\n  @builtin export declare function rotr(value: i32, shift: i32): i32;\n  @builtin export declare function reinterpret_f32(value: f32): i32;\n  @builtin export declare function load8_s(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load8_u(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load16_s(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load16_u(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function store8(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n  \n  export namespace atomic {\n    @builtin export declare function load8_u(offset: usize, immOffset?: usize): i32;\n    @builtin export declare function load16_u(offset: usize, immOffset?: usize): i32;\n    @builtin export declare function load(offset: usize, immOffset?: usize): i32;\n    @builtin export declare function store8(offset: usize, value: i32, immOffset?: usize): void;\n    @builtin export declare function store16(offset: usize, value: i32, immOffset?: usize): void;\n    @builtin export declare function store(offset: usize, value: i32, immOffset?: usize): void;\n    @builtin export declare function wait(ptr: usize, expected: i32, timeout: i64): AtomicWaitResult;\n    @builtin export declare function notify(ptr: usize, count: i32): i32;\n\n    export namespace rmw8 {\n      @builtin export declare function add_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function sub_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function and_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function or_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xor_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xchg_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n    export namespace rmw16 {\n      @builtin export declare function add_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function sub_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function and_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function or_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xor_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xchg_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n    export namespace rmw {\n      @builtin export declare function add(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function sub(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function and(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function or(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xor(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xchg(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function cmpxchg(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n  }\n}\n\n@builtin export declare function i64(value: void): i64;\nexport namespace i64 {\n  @lazy export const MIN_VALUE: i64 = -9223372036854775808;\n  @lazy export const MAX_VALUE: i64 =  9223372036854775807;\n  @builtin export declare function clz(value: i64): i64;\n  @builtin export declare function ctz(value: i64): i64;\n  @builtin export declare function load8_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load8_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load16_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load16_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load32_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load32_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load(offset: usize, immOffset?: usize): i64;\n  @builtin export declare function popcnt(value: i64): i64;\n  @builtin export declare function rotl(value: i64, shift: i64): i64;\n  @builtin export declare function rotr(value: i64, shift: i64): i64;\n  @builtin export declare function reinterpret_f64(value: f64): i64;\n  @builtin export declare function store8(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store32(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  export namespace atomic {\n    @builtin export declare function load8_u(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function load16_u(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function load32_u(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function load(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function store8(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function store16(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function store32(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function store(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function wait(ptr: usize, expected: i64, timeout: i64): AtomicWaitResult;\n    @builtin export declare function notify(ptr: usize, count: i32): i32;\n\n    export namespace rmw8 {\n      @builtin export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n    export namespace rmw16 {\n      @builtin export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n    export namespace rmw32 {\n      @builtin export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n    export namespace rmw {\n      @builtin export declare function add(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n  }\n}\n\n@builtin export declare function isize(value: void): isize;\nexport namespace isize {\n  @lazy export const MIN_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? -2147483648\n    : <isize>-9223372036854775808;\n  @lazy export const MAX_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? 2147483647\n    : <isize>9223372036854775807;\n}\n\n@builtin export declare function u8(value: void): u8;\nexport namespace u8 {\n  @lazy export const MIN_VALUE: u8 = 0;\n  @lazy export const MAX_VALUE: u8 = 255;\n}\n\n@builtin export declare function u16(value: void): u16;\nexport namespace u16 {\n  @lazy export const MIN_VALUE: u16 = 0;\n  @lazy export const MAX_VALUE: u16 = 65535;\n}\n\n@builtin export declare function u32(value: void): u32;\nexport namespace u32 {\n  @lazy export const MIN_VALUE: u32 = 0;\n  @lazy export const MAX_VALUE: u32 = 4294967295;\n}\n\n@builtin export declare function u64(value: void): u64;\nexport namespace u64 {\n  @lazy export const MIN_VALUE: u64 = 0;\n  @lazy export const MAX_VALUE: u64 = 18446744073709551615;\n}\n\n@builtin export declare function usize(value: void): usize;\nexport namespace usize {\n  @lazy export const MIN_VALUE: usize = 0;\n  @lazy export const MAX_VALUE: usize = sizeof<u32>() == sizeof<usize>()\n    ? 4294967295\n    : <usize>18446744073709551615;\n}\n\n@builtin export declare function bool(value: void): bool;\nexport namespace bool {\n  @lazy export const MIN_VALUE: bool = false;\n  @lazy export const MAX_VALUE: bool = true;\n}\n\n@builtin export declare function f32(value: void): f32;\nexport namespace f32 {\n  @lazy export const EPSILON = reinterpret<f32>(0x34000000); // 0x1p-23f\n  @lazy export const MIN_VALUE = reinterpret<f32>(0x00000001); // 0x0.000001p+0f\n  @lazy export const MAX_VALUE = reinterpret<f32>(0x7F7FFFFF); // 0x1.fffffep+127f\n  @lazy export const MIN_NORMAL_VALUE = reinterpret<f32>(0x00800000); // 0x1p-126f\n  @lazy export const MIN_SAFE_INTEGER: f32 = -16777215;\n  @lazy export const MAX_SAFE_INTEGER: f32 =  16777215;\n  @builtin export declare function abs(value: f32): f32;\n  @builtin export declare function ceil(value: f32): f32;\n  @builtin export declare function copysign(x: f32, y: f32): f32;\n  @builtin export declare function floor(value: f32): f32;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): f32;\n  @builtin export declare function max(left: f32, right: f32): f32;\n  @builtin export declare function min(left: f32, right: f32): f32;\n  @builtin export declare function nearest(value: f32): f32;\n  @builtin export declare function reinterpret_i32(value: i32): f32;\n  @builtin export declare function sqrt(value: f32): f32;\n  @builtin export declare function store(offset: usize, value: f32, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function trunc(value: f32): f32;\n}\n\n@builtin export declare function f64(value: void): f64;\nexport namespace f64 {\n  @lazy export const EPSILON = reinterpret<f64>(0x3CB0000000000000); // 0x1p-52\n  @lazy export const MIN_VALUE = reinterpret<f64>(0x0000000000000001); // 0x0.0000000000001p+0\n  @lazy export const MAX_VALUE = reinterpret<f64>(0x7FEFFFFFFFFFFFFF); // 0x1.fffffffffffffp+1023\n  @lazy export const MIN_NORMAL_VALUE = reinterpret<f64>(0x0010000000000000); // 0x1p-1022\n  @lazy export const MIN_SAFE_INTEGER: f64 = -9007199254740991;\n  @lazy export const MAX_SAFE_INTEGER: f64 =  9007199254740991;\n  @builtin export declare function abs(value: f64): f64;\n  @builtin export declare function ceil(value: f64): f64;\n  @builtin export declare function copysign(x: f64, y: f64): f64;\n  @builtin export declare function floor(value: f64): f64;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): f64;\n  @builtin export declare function max(left: f64, right: f64): f64;\n  @builtin export declare function min(left: f64, right: f64): f64;\n  @builtin export declare function nearest(value: f64): f64;\n  @builtin export declare function reinterpret_i64(value: i64): f64;\n  @builtin export declare function sqrt(value: f64): f64;\n  @builtin export declare function store(offset: usize, value: f64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function trunc(value: f64): f64;\n}\n\n@builtin export declare function v128(a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8, i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8): v128;\nexport namespace v128 {\n  @builtin export declare function splat<T>(x: T): v128;\n  @builtin export declare function extract_lane<T>(x: v128, idx: u8): T;\n  @builtin export declare function replace_lane<T>(x: v128, idx: u8, value: T): v128;\n  @builtin export declare function shuffle<T>(a: v128, b: v128, ...lanes: u8[]): v128;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): v128;\n  @builtin export declare function store(offset: usize, value: v128, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function add<T>(a: v128, b: v128): v128;\n  @builtin export declare function sub<T>(a: v128, b: v128): v128;\n  @builtin export declare function mul<T>(a: v128, b: v128): v128; // except i64\n  @builtin export declare function div<T>(a: v128, b: v128): v128; // f32, f64 only\n  @builtin export declare function neg<T>(a: v128): v128;\n  @builtin export declare function add_saturate<T>(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate<T>(a: v128, b: v128): v128;\n  @builtin export declare function shl<T>(a: v128, b: i32): v128;\n  @builtin export declare function shr<T>(a: v128, b: i32): v128;\n  @builtin export declare function and(a: v128, b: v128): v128;\n  @builtin export declare function or(a: v128, b: v128): v128;\n  @builtin export declare function xor(a: v128, b: v128): v128;\n  @builtin export declare function not(a: v128): v128;\n  @builtin export declare function bitselect(v1: v128, v2: v128, c: v128): v128;\n  @builtin export declare function any_true<T>(a: v128): bool;\n  @builtin export declare function all_true<T>(a: v128): bool;\n  @builtin export declare function min<T>(a: v128, b: v128): v128; // f32, f64 only\n  @builtin export declare function max<T>(a: v128, b: v128): v128; // f32, f64 only\n  @builtin export declare function abs<T>(a: v128): v128; // f32, f64 only\n  @builtin export declare function sqrt<T>(a: v128): v128; // f32, f64 only\n  @builtin export declare function eq<T>(a: v128, b: v128): v128;\n  @builtin export declare function ne<T>(a: v128, b: v128): v128;\n  @builtin export declare function lt<T>(a: v128, b: v128): v128;\n  @builtin export declare function le<T>(a: v128, b: v128): v128;\n  @builtin export declare function gt<T>(a: v128, b: v128): v128;\n  @builtin export declare function ge<T>(a: v128, b: v128): v128;\n  @builtin export declare function convert<T>(a: v128): v128;\n  @builtin export declare function trunc<T>(a: v128): v128;\n}\n\n@builtin export declare function i8x16(a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8, i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8): v128;\nexport namespace i8x16 {\n  @builtin export declare function splat(x: i8): v128;\n  @builtin export declare function extract_lane_s(x: v128, idx: u8): i8;\n  @builtin export declare function extract_lane_u(x: v128, idx: u8): u8;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i8): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function add_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function add_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt_s(a: v128, b: v128): v128;\n  @builtin export declare function lt_u(a: v128, b: v128): v128;\n  @builtin export declare function le_s(a: v128, b: v128): v128;\n  @builtin export declare function le_u(a: v128, b: v128): v128;\n  @builtin export declare function gt_s(a: v128, b: v128): v128;\n  @builtin export declare function gt_u(a: v128, b: v128): v128;\n  @builtin export declare function ge_s(a: v128, b: v128): v128;\n  @builtin export declare function ge_u(a: v128, b: v128): v128;\n}\n\n@builtin export declare function i16x8(a: i16, b: i16, c: i16, d: i16, e: i16, f: i16, g: i16, h: i16): v128;\nexport namespace i16x8 {\n  @builtin export declare function splat(x: i16): v128;\n  @builtin export declare function extract_lane_s(x: v128, idx: u8): i16;\n  @builtin export declare function extract_lane_u(x: v128, idx: u8): u16;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i16): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function add_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function add_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt_s(a: v128, b: v128): v128;\n  @builtin export declare function lt_u(a: v128, b: v128): v128;\n  @builtin export declare function le_s(a: v128, b: v128): v128;\n  @builtin export declare function le_u(a: v128, b: v128): v128;\n  @builtin export declare function gt_s(a: v128, b: v128): v128;\n  @builtin export declare function gt_u(a: v128, b: v128): v128;\n  @builtin export declare function ge_s(a: v128, b: v128): v128;\n  @builtin export declare function ge_u(a: v128, b: v128): v128;\n}\n\n@builtin export declare function i32x4(a: i32, b: i32, c: i32, d: i32): v128;\nexport namespace i32x4 {\n  @builtin export declare function splat(x: i32): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): i32;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i32): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt_s(a: v128, b: v128): v128;\n  @builtin export declare function lt_u(a: v128, b: v128): v128;\n  @builtin export declare function le_s(a: v128, b: v128): v128;\n  @builtin export declare function le_u(a: v128, b: v128): v128;\n  @builtin export declare function gt_s(a: v128, b: v128): v128;\n  @builtin export declare function gt_u(a: v128, b: v128): v128;\n  @builtin export declare function ge_s(a: v128, b: v128): v128;\n  @builtin export declare function ge_u(a: v128, b: v128): v128;\n  @builtin export declare function trunc_s_f32x4_sat(a: v128): v128;\n  @builtin export declare function trunc_u_f32x4_sat(a: v128): v128;\n}\n\n@builtin export declare function i64x2(a: i64, b: i64): v128;\nexport namespace i64x2 {\n  @builtin export declare function splat(x: i64): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): i64;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i64): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function trunc_s_f64x2_sat(a: v128): v128;\n  @builtin export declare function trunc_u_f64x2_sat(a: v128): v128;\n}\n\n@builtin export declare function f32x4(a: f32, b: f32, c: f32, d: f32): v128;\nexport namespace f32x4 {\n  @builtin export declare function splat(x: f32): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): f32;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: f32): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function div(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function min(a: v128, b: v128): v128;\n  @builtin export declare function max(a: v128, b: v128): v128;\n  @builtin export declare function abs(a: v128): v128;\n  @builtin export declare function sqrt(a: v128): v128;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt(a: v128, b: v128): v128;\n  @builtin export declare function le(a: v128, b: v128): v128;\n  @builtin export declare function gt(a: v128, b: v128): v128;\n  @builtin export declare function ge(a: v128, b: v128): v128;\n  @builtin export declare function convert_s_i32x4(a: v128): v128;\n  @builtin export declare function convert_u_i32x4(a: v128): v128;\n}\n\n@builtin export declare function f64x2(a: f64, b: f64): v128;\nexport namespace f64x2 {\n  @builtin export declare function splat(x: f64): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): f64;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: f64): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function div(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function min(a: v128, b: v128): v128;\n  @builtin export declare function max(a: v128, b: v128): v128;\n  @builtin export declare function abs(a: v128): v128;\n  @builtin export declare function sqrt(a: v128): v128;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt(a: v128, b: v128): v128;\n  @builtin export declare function le(a: v128, b: v128): v128;\n  @builtin export declare function gt(a: v128, b: v128): v128;\n  @builtin export declare function ge(a: v128, b: v128): v128;\n  @builtin export declare function convert_s_i64x2(a: v128): v128;\n  @builtin export declare function convert_u_i64x2(a: v128): v128;\n}\n\nexport namespace v8x16 {\n  @builtin export declare function shuffle(a: v128, b: v128, l0: u8, l1: u8, l2: u8, l3: u8, l4: u8, l5: u8, l6: u8, l7: u8, l8: u8, l9: u8, l10: u8, l11: u8, l12: u8, l13: u8, l14: u8, l15: u8): v128;\n}\n\n@builtin export declare function start(): void;\n","\n      import { storage, near } from \"./near\";\n      import { JSONEncoder } from \"./json/encoder\"\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState } from \"./json/decoder\"\n      import {Cell as wrapped_Cell, RGB as wrapped_RGB, Point as wrapped_Point, TransferArgs as wrapped_TransferArgs, ContinueArgs as wrapped_ContinueArgs} from \"./model\";\n\n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_len: usize, value_ptr: usize): void;\n    \nexport function __near_encode_RGB(\n          value: wrapped_RGB,\n          encoder: JSONEncoder): void {\nencoder.setInteger(\"r\", value.r);\nencoder.setInteger(\"g\", value.g);\nencoder.setInteger(\"b\", value.b);\n}\nexport function __near_encode_Cell(\n          value: wrapped_Cell,\n          encoder: JSONEncoder): void {\nif (value.rgb != null) {\n          encoder.pushObject(\"rgb\");\n          __near_encode_RGB(<RGB>value.rgb, encoder);\n          encoder.popObject();\n        } else {\n          encoder.setNull(\"rgb\");\n        }\nencoder.setString(\"price\", value.price.toString());\nif (value.owner != null) {\n            encoder.setString(\"owner\", value.owner);\n          } else {\n            encoder.setNull(\"owner\");\n          }\n}\nexport class __near_JSONHandler_Cell extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_Cell>;\n      handledRoot: boolean = false;\n      value: wrapped_Cell;\n\n      constructor(value_: wrapped_Cell) {\n        super();\n        this.value = value_;\n      }\n      \nsetString(name: string, value: String): void {\nif (name == \"price\") {\n            this.value.price = U64.parseInt(value);\n            return;\n          }\nif (name == \"owner\") {\n            this.value.owner = <String>value;\n            return;\n          }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"rgb\") {\n        this.value.rgb = <wrapped_RGB>null;\n        return;\n      }\nif (name == \"price\") {\n        this.value.price = <u64>null;\n        return;\n      }\nif (name == \"owner\") {\n        this.value.owner = <String>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\nif (name == \"rgb\") {\n          this.value.rgb = <RGB>__near_decode_RGB(this.buffer, this.decoder.state);\n          return false;\n        }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\n\nexport class __near_JSONHandler_RGB extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_RGB>;\n      handledRoot: boolean = false;\n      value: wrapped_RGB;\n\n      constructor(value_: wrapped_RGB) {\n        super();\n        this.value = value_;\n      }\n      \nsetInteger(name: string, value: i64): void {\nif (name == \"r\") {\n            this.value.r = <u32>value;\n            return;\n          }\nif (name == \"g\") {\n            this.value.g = <u32>value;\n            return;\n          }\nif (name == \"b\") {\n            this.value.b = <u32>value;\n            return;\n          }\n\n        super.setInteger(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"r\") {\n        this.value.r = <u32>null;\n        return;\n      }\nif (name == \"g\") {\n        this.value.g = <u32>null;\n        return;\n      }\nif (name == \"b\") {\n        this.value.b = <u32>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\n\nexport function __near_decode_RGB(\n        buffer: Uint8Array, state: DecoderState, value: wrapped_RGB = null):wrapped_RGB {\n      if (value == null) {\n        value = new wrapped_RGB();\n      }\n      let handler = new __near_JSONHandler_RGB(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_RGB>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\n\nexport function __near_decode_Cell(\n        buffer: Uint8Array, state: DecoderState, value: wrapped_Cell = null):wrapped_Cell {\n      if (value == null) {\n        value = new wrapped_Cell();\n      }\n      let handler = new __near_JSONHandler_Cell(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_Cell>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\n\nexport function __near_encode_Point(\n          value: wrapped_Point,\n          encoder: JSONEncoder): void {\nencoder.setInteger(\"x\", value.x);\nencoder.setInteger(\"y\", value.y);\n}\nexport class __near_JSONHandler_Point extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_Point>;\n      handledRoot: boolean = false;\n      value: wrapped_Point;\n\n      constructor(value_: wrapped_Point) {\n        super();\n        this.value = value_;\n      }\n      \nsetInteger(name: string, value: i64): void {\nif (name == \"x\") {\n            this.value.x = <u32>value;\n            return;\n          }\nif (name == \"y\") {\n            this.value.y = <u32>value;\n            return;\n          }\n\n        super.setInteger(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"x\") {\n        this.value.x = <u32>null;\n        return;\n      }\nif (name == \"y\") {\n        this.value.y = <u32>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\n\nexport function __near_decode_Point(\n        buffer: Uint8Array, state: DecoderState, value: wrapped_Point = null):wrapped_Point {\n      if (value == null) {\n        value = new wrapped_Point();\n      }\n      let handler = new __near_JSONHandler_Point(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_Point>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\n\nexport function __near_encode_TransferArgs(\n          value: wrapped_TransferArgs,\n          encoder: JSONEncoder): void {\nif (value.from != null) {\n            encoder.setString(\"from\", value.from);\n          } else {\n            encoder.setNull(\"from\");\n          }\nif (value.to != null) {\n            encoder.setString(\"to\", value.to);\n          } else {\n            encoder.setNull(\"to\");\n          }\nencoder.setString(\"tokens\", value.tokens.toString());\n}\nexport class __near_JSONHandler_TransferArgs extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_TransferArgs>;\n      handledRoot: boolean = false;\n      value: wrapped_TransferArgs;\n\n      constructor(value_: wrapped_TransferArgs) {\n        super();\n        this.value = value_;\n      }\n      \nsetString(name: string, value: String): void {\nif (name == \"from\") {\n            this.value.from = <String>value;\n            return;\n          }\nif (name == \"to\") {\n            this.value.to = <String>value;\n            return;\n          }\nif (name == \"tokens\") {\n            this.value.tokens = U64.parseInt(value);\n            return;\n          }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"from\") {\n        this.value.from = <String>null;\n        return;\n      }\nif (name == \"to\") {\n        this.value.to = <String>null;\n        return;\n      }\nif (name == \"tokens\") {\n        this.value.tokens = <u64>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\n\nexport function __near_decode_TransferArgs(\n        buffer: Uint8Array, state: DecoderState, value: wrapped_TransferArgs = null):wrapped_TransferArgs {\n      if (value == null) {\n        value = new wrapped_TransferArgs();\n      }\n      let handler = new __near_JSONHandler_TransferArgs(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_TransferArgs>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\n\nexport function __near_encode_ContinueArgs(\n          value: wrapped_ContinueArgs,\n          encoder: JSONEncoder): void {\nif (value.point != null) {\n          encoder.pushObject(\"point\");\n          __near_encode_Point(<Point>value.point, encoder);\n          encoder.popObject();\n        } else {\n          encoder.setNull(\"point\");\n        }\nif (value.cell != null) {\n          encoder.pushObject(\"cell\");\n          __near_encode_Cell(<Cell>value.cell, encoder);\n          encoder.popObject();\n        } else {\n          encoder.setNull(\"cell\");\n        }\n}\nexport class __near_JSONHandler_ContinueArgs extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_ContinueArgs>;\n      handledRoot: boolean = false;\n      value: wrapped_ContinueArgs;\n\n      constructor(value_: wrapped_ContinueArgs) {\n        super();\n        this.value = value_;\n      }\n      \nsetNull(name: string): void {\nif (name == \"point\") {\n        this.value.point = <wrapped_Point>null;\n        return;\n      }\nif (name == \"cell\") {\n        this.value.cell = <wrapped_Cell>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\nif (name == \"point\") {\n          this.value.point = <Point>__near_decode_Point(this.buffer, this.decoder.state);\n          return false;\n        }\nif (name == \"cell\") {\n          this.value.cell = <Cell>__near_decode_Cell(this.buffer, this.decoder.state);\n          return false;\n        }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\n\nexport function __near_decode_ContinueArgs(\n        buffer: Uint8Array, state: DecoderState, value: wrapped_ContinueArgs = null):wrapped_ContinueArgs {\n      if (value == null) {\n        value = new wrapped_ContinueArgs();\n      }\n      let handler = new __near_JSONHandler_ContinueArgs(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_ContinueArgs>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\n\nexport class Cell extends wrapped_Cell {\n        static decode(json: Uint8Array): Cell {\n          let value = new Cell();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): Cell {\n          <Cell>__near_decode_Cell(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_Cell(<Cell>this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      }\nexport class RGB extends wrapped_RGB {\n        static decode(json: Uint8Array): RGB {\n          let value = new RGB();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): RGB {\n          <RGB>__near_decode_RGB(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_RGB(<RGB>this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      }\nexport class Point extends wrapped_Point {\n        static decode(json: Uint8Array): Point {\n          let value = new Point();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): Point {\n          <Point>__near_decode_Point(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_Point(<Point>this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      }\nexport class TransferArgs extends wrapped_TransferArgs {\n        static decode(json: Uint8Array): TransferArgs {\n          let value = new TransferArgs();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): TransferArgs {\n          <TransferArgs>__near_decode_TransferArgs(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_TransferArgs(<TransferArgs>this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      }\nexport class ContinueArgs extends wrapped_ContinueArgs {\n        static decode(json: Uint8Array): ContinueArgs {\n          let value = new ContinueArgs();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): ContinueArgs {\n          <ContinueArgs>__near_decode_ContinueArgs(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_ContinueArgs(<ContinueArgs>this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      }","import {\n  HEADER_SIZE,\n  MAX_BLENGTH,\n  allocateUnsafe\n} from \"./internal/arraybuffer\";\n\nimport {\n  Uint8ClampedArray,\n  Uint8Array,\n  Int8Array,\n  Uint16Array,\n  Int16Array,\n  Uint32Array,\n  Int32Array,\n  Uint64Array,\n  Int64Array\n} from \"./typedarray\";\n\nimport {\n  DataView\n} from \"./dataview\";\n\n@sealed\nexport class ArrayBuffer {\n\n  readonly byteLength: i32; // capped to [0, MAX_LENGTH]\n\n  @inline static isView<T>(value: T): bool {\n    if (value === null) return false;\n    if (value instanceof Uint8ClampedArray) return true;\n    if (value instanceof Uint8Array) return true;\n    if (value instanceof Int8Array) return true;\n    if (value instanceof Uint16Array) return true;\n    if (value instanceof Int16Array) return true;\n    if (value instanceof Uint32Array) return true;\n    if (value instanceof Int32Array) return true;\n    if (value instanceof Uint64Array) return true;\n    if (value instanceof Int64Array) return true;\n    if (value instanceof DataView) return true;\n    return false;\n  }\n\n  // @unsafe\n  @inline get data(): usize { return changetype<usize>(this) + HEADER_SIZE; }\n\n  constructor(length: i32, unsafe: bool = false) {\n    if (<u32>length > <u32>MAX_BLENGTH) throw new RangeError(\"Invalid array buffer length\");\n    var buffer = allocateUnsafe(length);\n    if (!unsafe) memory.fill(changetype<usize>(buffer) + HEADER_SIZE, 0, <usize>length);\n    return buffer;\n  }\n\n  slice(begin: i32 = 0, end: i32 = MAX_BLENGTH): ArrayBuffer {\n    var len = this.byteLength;\n    begin = begin < 0 ? max(len + begin, 0) : min(begin, len);\n    end = end < 0 ? max(len + end, 0) : min(end, len);\n    len = max(end - begin, 0);\n    var buffer = allocateUnsafe(len);\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      changetype<usize>(this) + HEADER_SIZE + begin,\n      len\n    );\n    return buffer;\n  }\n\n  toString(): string {\n    return \"[object ArrayBuffer]\";\n  }\n}\n","import {\n  MAX_BLENGTH,\n  HEADER_SIZE,\n  allocateUnsafe,\n  reallocateUnsafe,\n  LOAD,\n  STORE\n} from \"./internal/arraybuffer\";\n\nimport {\n  allocateUnsafe as allocateUnsafeString,\n  freeUnsafe as freeUnsafeString,\n  copyUnsafe as copyUnsafeString\n} from \"./internal/string\";\n\nimport {\n  COMPARATOR,\n  SORT\n} from \"./internal/sort\";\n\nimport {\n  itoa,\n  dtoa,\n  itoa_stream,\n  dtoa_stream,\n  MAX_DOUBLE_LENGTH\n} from \"./internal/number\";\n\nimport {\n  isArray as builtin_isArray\n} from \"./builtins\";\n\nexport class Array<T> {\n  [key: number]: T; // compatibility only\n\n  /* @internal */ buffer_: ArrayBuffer;\n  /* @internal */ length_: i32;\n\n  @inline static isArray<U>(value: U): bool {\n    return builtin_isArray(value) && value !== null;\n  }\n\n  constructor(length: i32 = 0) {\n    const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n    if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    this.buffer_ = buffer;\n    this.length_ = length;\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      0,\n      <usize>byteLength\n    );\n  }\n\n  @inline\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(length: i32) {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>length > <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, length << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = length;\n  }\n\n  every(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (!callbackfn(LOAD<T>(this.buffer_, index), index, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(predicate: (element: T, index: i32, array: Array<T>) => bool): i32 {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (predicate(LOAD<T>(this.buffer_, index), index, this)) return index;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): T {\n    var buffer = this.buffer_;\n    return <u32>index < <u32>(buffer.byteLength >>> alignof<T>())\n      ? LOAD<T>(buffer, index)\n      : <T>unreachable();\n  }\n\n  @operator(\"{}\")\n  private __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer_, index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: T): void {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>index >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>index >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, (index + 1) << alignof<T>());\n      this.buffer_ = buffer;\n      this.length_ = index + 1;\n    }\n    STORE<T>(buffer, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  @operator(\"{}=\")\n  private __unchecked_set(index: i32, value: T): void {\n    STORE<T>(this.buffer_, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len    = this.length_;\n\n    start = start < 0 ? max(len + start, 0) : min(start, len);\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n\n    if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          changetype<usize>(buffer) + start + HEADER_SIZE,\n          <u8>value,\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        STORE<T>(buffer, start, value);\n      }\n    }\n    return this;\n  }\n\n  @inline\n  includes(searchElement: T, fromIndex: i32 = 0): bool {\n    return this.indexOf(searchElement, fromIndex) >= 0;\n  }\n\n  indexOf(searchElement: T, fromIndex: i32 = 0): i32 {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var buffer = this.buffer_;\n    while (fromIndex < length) {\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(searchElement: T, fromIndex: i32 = this.length_): i32 {\n    var length = this.length_;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex; // no need to clamp\n    else if (fromIndex >= length) fromIndex = length - 1;\n    var buffer = this.buffer_;\n    while (fromIndex >= 0) {                           // ^\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(element: T): i32 {\n    var length = this.length_;\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = newLength;\n    STORE<T>(buffer, length, element);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  concat(items: Array<T>): Array<T> {\n    var thisLen = this.length_;\n    var otherLen = select(0, items.length_, items === null);\n    var outLen = thisLen + otherLen;\n    var out = new Array<T>(outLen);\n\n    if (thisLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)  + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE,\n        <usize>thisLen << alignof<T>()\n      );\n    }\n    if (otherLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)   + HEADER_SIZE + (<usize>thisLen << alignof<T>()),\n        changetype<usize>(items.buffer_) + HEADER_SIZE,\n        <usize>otherLen << alignof<T>()\n      );\n    }\n    return out;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len = this.length_;\n\n        end   = min<i32>(end, len);\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    if (from < to && to < (from + count)) {\n      from += count - 1;\n      to   += count - 1;\n      while (count) {\n        STORE<T>(buffer, to, LOAD<T>(buffer, from));\n        --from, --to, --count;\n      }\n    } else {\n      memory.copy(\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>to << alignof<T>()),\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>from << alignof<T>()),\n        <usize>count << alignof<T>()\n      );\n    }\n    return this;\n  }\n\n  pop(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var element = LOAD<T>(this.buffer_, --length);\n    this.length_ = length;\n    return element;\n  }\n\n  forEach(callbackfn: (value: T, index: i32, array: Array<T>) => void): void {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      callbackfn(LOAD<T>(this.buffer_, index), index, this);\n    }\n  }\n\n  map<U>(callbackfn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var length = this.length_;\n    var result = new Array<U>(length);\n    var buffer = result.buffer_;\n    for (let index = 0; index < min(length, this.length_); ++index) {\n      STORE<U>(buffer, index, callbackfn(LOAD<T>(this.buffer_, index), index, this));\n    }\n    return result;\n  }\n\n  filter(callbackfn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var result = new Array<T>();\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      let value = LOAD<T>(this.buffer_, index);\n      if (callbackfn(value, index, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      accum = callbackfn(accum, LOAD<T>(this.buffer_, index), index, this);\n    }\n    return accum;\n  }\n\n  reduceRight<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = this.length_ - 1; index >= 0; --index) {\n      accum = callbackfn(accum, LOAD<T>(this.buffer_, index), index, this);\n    }\n    return accum;\n  }\n\n  shift(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var buffer = this.buffer_;\n    var element = LOAD<T>(buffer, 0);\n    var lastIndex = length - 1;\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    STORE<T>(buffer, lastIndex, <T>null);\n    this.length_ = lastIndex;\n    return element;\n  }\n\n  some(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (callbackfn(LOAD<T>(this.buffer_, index), index, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(element: T): i32 {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var length = this.length_;\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      capacity = buffer.byteLength >>> alignof<T>();\n      this.buffer_ = buffer;\n    }\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      changetype<usize>(buffer) + HEADER_SIZE,\n      <usize>(capacity - 1) << alignof<T>()\n    );\n    STORE<T>(buffer, 0, element);\n    this.length_ = newLength;\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var len = this.length_;\n    begin = begin < 0 ? max(begin + len, 0) : min(begin, len);\n    end = end < 0 ? max(end + len, 0) : min(end, len);\n    len = max(end - begin, 0);\n    var sliced = new Array<T>(len);\n    if (len) {\n      memory.copy(\n        changetype<usize>(sliced.buffer_) + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE + (<usize>begin << alignof<T>()),\n        <usize>len << alignof<T>()\n      );\n    }\n    return sliced;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\n    var length  = this.length_;\n    start       = start < 0 ? max<i32>(length + start, 0) : min<i32>(start, length);\n    deleteCount = max<i32>(min<i32>(deleteCount, length - start), 0);\n    var buffer  = this.buffer_;\n    var spliced = new Array<T>(deleteCount);\n    var source  = changetype<usize>(buffer) + HEADER_SIZE + (<usize>start << alignof<T>());\n    memory.copy(\n      changetype<usize>(spliced.buffer_) + HEADER_SIZE,\n      source,\n      <usize>deleteCount << alignof<T>()\n    );\n    var offset = start + deleteCount;\n    if (length != offset) {\n      memory.copy(\n        source,\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>offset << alignof<T>()),\n        <usize>(length - offset) << alignof<T>()\n      );\n    }\n    this.length_ = length - deleteCount;\n    return spliced;\n  }\n\n  reverse(): Array<T> {\n    var buffer = this.buffer_;\n    for (let front = 0, back = this.length_ - 1; front < back; ++front, --back) {\n      let temp = LOAD<T>(buffer, front);\n      STORE<T>(buffer, front, LOAD<T>(buffer, back));\n      STORE<T>(buffer, back, temp);\n    }\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    // TODO remove this when flow will allow trackcing null\n    assert(comparator); // The comparison function must be a function\n\n    var length = this.length_;\n    if (length <= 1) return this;\n    var buffer = this.buffer_;\n    if (length == 2) {\n      let a = LOAD<T>(buffer, 1); // a = arr[1]\n      let b = LOAD<T>(buffer, 0); // b = arr[0]\n      if (comparator(a, b) < 0) {\n        STORE<T>(buffer, 1, b);   // arr[1] = b;\n        STORE<T>(buffer, 0, a);   // arr[0] = a;\n      }\n      return this;\n    }\n    SORT<T>(buffer, 0, length, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var result = \"\";\n    var value: T;\n    var buffer = this.buffer_;\n    var sepLen = separator.length;\n    var hasSeparator = sepLen != 0;\n    if (value instanceof bool) {\n      if (!lastIndex) return select<string>(\"true\", \"false\", LOAD<T,bool>(buffer, 0));\n\n      let valueLen = 5; // max possible length of element len(\"false\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,bool>(buffer, i);\n        valueLen = 4 + <i32>(!value);\n        copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n        offset += valueLen;\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,bool>(buffer, lastIndex);\n      valueLen = 4 + <i32>(!value);\n      copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n      offset += valueLen;\n\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isInteger<T>()) {\n      if (!lastIndex) return changetype<string>(itoa<T>(LOAD<T>(buffer, 0)));\n\n      const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + <i32>isSigned<T>();\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isFloat<T>()) {\n      if (!lastIndex) return changetype<string>(dtoa(LOAD<T,f64>(buffer, 0)));\n\n      const valueLen = MAX_DOUBLE_LENGTH;\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,f64>(buffer, i);\n        offset += dtoa_stream(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,f64>(buffer, lastIndex);\n      offset += dtoa_stream(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isString<T>()) {\n      if (!lastIndex) return LOAD<string>(buffer, 0);\n\n      let estLen = 0;\n      for (let i = 0, len = lastIndex + 1; i < len; ++i) {\n        estLen += LOAD<string>(buffer, i).length;\n      }\n      let offset = 0;\n      let result = allocateUnsafeString(estLen + sepLen * lastIndex);\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<string>(buffer, i);\n        if (value) {\n          let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n          copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n          offset += valueLen;                                   // tslint:disable-line:no-unsafe-any\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<string>(buffer, lastIndex);\n      if (value) {\n        let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n        copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n      }\n      return result;\n    } else if (isArray<T>()) {\n      if (!lastIndex) {\n        value = LOAD<T>(buffer, 0);\n        return value ? value.join(separator) : \"\"; // tslint:disable-line:no-unsafe-any\n      }\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n        if (hasSeparator) result += separator;\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n      return result;\n    } else if (isReference<T>()) { // References\n      if (!lastIndex) return \"[object Object]\";\n      const valueLen = 15; // max possible length of element len(\"[object Object]\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) {\n          copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n          offset += valueLen;\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      if (LOAD<T>(buffer, lastIndex)) {\n        copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n        offset += valueLen;\n      }\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else {\n      assert(false); // Unsupported generic typename\n    }\n  }\n\n  @inline\n  toString(): string {\n    return this.join();\n  }\n\n  private __gc(): void {\n    var buffer = this.buffer_;\n    __gc_mark(changetype<usize>(buffer)); // tslint:disable-line\n    if (isManaged<T>()) {\n      let offset: usize = 0;\n      let end = <usize>this.length_ << alignof<usize>();\n      while (offset < end) {\n        __gc_mark(load<usize>(changetype<usize>(buffer) + offset, HEADER_SIZE)); // tslint:disable-line\n        offset += sizeof<usize>();\n      }\n    }\n  }\n}\n","declare function logStr(str: string): void;\ndeclare function logF64(val: f64): void;\n\nexport class JSONEncoder {\n    private isFirstKey: bool[] = new Array<bool>(1);\n    private result: string[] = new Array<string>();\n\n    constructor() {\n      this.isFirstKey[0] = true;\n    }\n\n    serialize(): Uint8Array {\n        // TODO: Write directly to UTF8 bytes\n        let result = this.toString();\n        let utf8ptr = result.toUTF8();\n        let buffer = new Uint8Array(result.lengthUTF8 - 1);\n        memory.copy(buffer.buffer.data, utf8ptr, buffer.byteLength);\n        return buffer;\n    }\n\n    toString(): String {\n        return this.result.join(\"\");\n    }\n\n    setString(name: string, value: string): void {\n        this.writeKey(name);\n        this.writeString(value);\n    }\n\n    setBoolean(name: string, value: bool): void {\n        this.writeKey(name);\n        this.writeBoolean(value);\n    }\n\n    setNull(name: string): void {\n        this.writeKey(name);\n        this.write(\"null\");\n    }\n\n    setInteger(name: string, value: i64): void {\n        this.writeKey(name);\n        this.writeInteger(value);\n    }\n\n    pushArray(name: string): bool {\n        this.writeKey(name);\n        this.write(\"[\");\n        this.isFirstKey.push(true);\n        return true;\n    }\n\n    popArray(): void {\n        this.write(\"]\");\n        this.isFirstKey.pop();\n    }\n\n    pushObject(name: string): bool {\n        this.writeKey(name);\n        this.write(\"{\");\n        this.isFirstKey.push(true);\n        return true;\n    }\n\n    popObject(): void {\n        this.write(\"}\");\n        this.isFirstKey.pop();\n    }\n\n    private writeKey(str: string): void {\n        if (!this.isFirstKey[this.isFirstKey.length - 1]) {\n            this.write(\",\");\n        } else {\n            this.isFirstKey[this.isFirstKey.length - 1] = false;\n        }\n        if (str != null) {\n            this.writeString(str);\n            this.write(\":\");\n        }\n    }\n\n    private writeString(str: string): void {\n        this.write('\"');\n        let savedIndex = 0;\n        for (let i = 0; i < str.length; i++) {\n            let char = str.charCodeAt(i);\n            let needsEscaping = char < 0x20 || char == '\"'.charCodeAt(0) || char == '\\\\'.charCodeAt(0);\n            if (needsEscaping) {\n                this.write(str.substring(savedIndex, i));\n                savedIndex = i + 1;\n                if (char == '\"'.charCodeAt(0)) {\n                    this.write('\\\\\"');\n                } else if (char == \"\\\\\".charCodeAt(0)) {\n                    this.write(\"\\\\\\\\\");\n                } else if (char == \"\\b\".charCodeAt(0)) {\n                    this.write(\"\\\\b\");\n                } else if (char == \"\\n\".charCodeAt(0)) {\n                    this.write(\"\\\\n\");\n                } else if (char == \"\\r\".charCodeAt(0)) {\n                    this.write(\"\\\\r\");\n                } else if (char == \"\\t\".charCodeAt(0)) {\n                    this.write(\"\\\\t\");\n                } else {\n                    // TODO: Implement encoding for other contol characters\n                    assert(false, \"Unsupported control character code: \" + char.toString());\n                }\n            }\n        }\n        this.write(str.substring(savedIndex, str.length));\n        this.write('\"');\n    }\n\n    private writeBoolean(value: bool): void {\n        this.write(value ? \"true\" : \"false\");\n    }\n\n    private writeInteger(value: i64): void {\n        this.write(value.toString());\n    }\n\n    private write(str: string): void {\n        this.result.push(str);\n    }\n}\n"]}